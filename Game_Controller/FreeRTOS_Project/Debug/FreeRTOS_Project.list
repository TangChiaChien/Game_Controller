
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aba4  0800aba4  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abac  0800abac  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800abb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          0001389c  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013a40  20013a40  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022af1  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a3a  00000000  00000000  00042cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  00047700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001658  00000000  00000000  00048f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fb8  00000000  00000000  0004a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d703  00000000  00000000  00071568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2cea  00000000  00000000  0008ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00171955  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000652c  00000000  00000000  001719a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aad0 	.word	0x0800aad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800aad0 	.word	0x0800aad0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MEMS_Write>:

int move_way = 4;
int direct_way = 4;
int btn_way = 4;

void MEMS_Write(uint8_t address,uint8_t data){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <MEMS_Write+0x44>)
 80004de:	f001 fc59 	bl	8001d94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004e2:	1df9      	adds	r1, r7, #7
 80004e4:	230a      	movs	r3, #10
 80004e6:	2201      	movs	r2, #1
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MEMS_Write+0x48>)
 80004ea:	f003 fb0c 	bl	8003b06 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004ee:	1db9      	adds	r1, r7, #6
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <MEMS_Write+0x48>)
 80004f6:	f003 fb06 	bl	8003b06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MEMS_Write+0x44>)
 8000500:	f001 fc48 	bl	8001d94 <HAL_GPIO_WritePin>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	20013084 	.word	0x20013084

08000514 <Sensor_init>:
	HAL_SPI_Receive(&hspi1,data,1,10);
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
}

void Sensor_init()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    MEMS_Write(0x21,0x01);
 8000518:	2101      	movs	r1, #1
 800051a:	2021      	movs	r0, #33	; 0x21
 800051c:	f7ff ffd4 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x23,0x48);
 8000520:	2148      	movs	r1, #72	; 0x48
 8000522:	2023      	movs	r0, #35	; 0x23
 8000524:	f7ff ffd0 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x20,0x67);
 8000528:	2167      	movs	r1, #103	; 0x67
 800052a:	2020      	movs	r0, #32
 800052c:	f7ff ffcc 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x24,0x00);
 8000530:	2100      	movs	r1, #0
 8000532:	2024      	movs	r0, #36	; 0x24
 8000534:	f7ff ffc8 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x57,0x55);
 8000538:	2155      	movs	r1, #85	; 0x55
 800053a:	2057      	movs	r0, #87	; 0x57
 800053c:	f7ff ffc4 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x40,0x05);
 8000540:	2105      	movs	r1, #5
 8000542:	2040      	movs	r0, #64	; 0x40
 8000544:	f7ff ffc0 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x41,0x11);
 8000548:	2111      	movs	r1, #17
 800054a:	2041      	movs	r0, #65	; 0x41
 800054c:	f7ff ffbc 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x59,0xFC);
 8000550:	21fc      	movs	r1, #252	; 0xfc
 8000552:	2059      	movs	r0, #89	; 0x59
 8000554:	f7ff ffb8 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x5A,0xFC);
 8000558:	21fc      	movs	r1, #252	; 0xfc
 800055a:	205a      	movs	r0, #90	; 0x5a
 800055c:	f7ff ffb4 	bl	80004c8 <MEMS_Write>
    MEMS_Write(0x5B,0x01);
 8000560:	2101      	movs	r1, #1
 8000562:	205b      	movs	r0, #91	; 0x5b
 8000564:	f7ff ffb0 	bl	80004c8 <MEMS_Write>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <Press>:

void Press(uint8_t keycode_1, uint8_t keycode_2, uint8_t keycode_3){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	460b      	mov	r3, r1
 8000578:	71bb      	strb	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	717b      	strb	r3, [r7, #5]

	keyboardhid.KEYCODE1 = keycode_1; // press keycode
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <Press+0x3c>)
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	7093      	strb	r3, [r2, #2]
	keyboardhid.KEYCODE2 = keycode_2; // press keycode
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <Press+0x3c>)
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	70d3      	strb	r3, [r2, #3]
	keyboardhid.KEYCODE3 = keycode_3; // press keycode
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <Press+0x3c>)
 800058c:	797b      	ldrb	r3, [r7, #5]
 800058e:	7113      	strb	r3, [r2, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000590:	2208      	movs	r2, #8
 8000592:	4905      	ldr	r1, [pc, #20]	; (80005a8 <Press+0x3c>)
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <Press+0x40>)
 8000596:	f008 fc55 	bl	8008e44 <USBD_HID_SendReport>
	vTaskDelay(20);
 800059a:	2014      	movs	r0, #20
 800059c:	f006 fd48 	bl	8007030 <vTaskDelay>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200001c4 	.word	0x200001c4
 80005ac:	20013168 	.word	0x20013168

080005b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken=pdFALSE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xSemaphore,&xHigherPriorityTaskWoken);
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f107 020c 	add.w	r2, r7, #12
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fff3 	bl	80065b4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d007      	beq.n	80005e4 <HAL_GPIO_EXTI_Callback+0x34>
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80005d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	f3bf 8f6f 	isb	sy
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001c0 	.word	0x200001c0
 80005f0:	e000ed04 	.word	0xe000ed04

080005f4 <Joystick_detection>:

void Joystick_detection(void *pvParameters){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		  move_way = 4;
 80005fc:	4b42      	ldr	r3, [pc, #264]	; (8000708 <Joystick_detection+0x114>)
 80005fe:	2204      	movs	r2, #4
 8000600:	601a      	str	r2, [r3, #0]
		  direct_way = 4;
 8000602:	4b42      	ldr	r3, [pc, #264]	; (800070c <Joystick_detection+0x118>)
 8000604:	2204      	movs	r2, #4
 8000606:	601a      	str	r2, [r3, #0]
		  btn_way = 4;
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <Joystick_detection+0x11c>)
 800060a:	2204      	movs	r2, #4
 800060c:	601a      	str	r2, [r3, #0]

		  JoyStick_Read(JoyStick1, JoyStick1_XY);
 800060e:	4941      	ldr	r1, [pc, #260]	; (8000714 <Joystick_detection+0x120>)
 8000610:	2000      	movs	r0, #0
 8000612:	f005 fc37 	bl	8005e84 <JoyStick_Read>

		  if(JoyStick1_XY[0] >= 3500){
 8000616:	4b3f      	ldr	r3, [pc, #252]	; (8000714 <Joystick_detection+0x120>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800061e:	4293      	cmp	r3, r2
 8000620:	d902      	bls.n	8000628 <Joystick_detection+0x34>
			  move_way = 0;
 8000622:	4b39      	ldr	r3, [pc, #228]	; (8000708 <Joystick_detection+0x114>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick1_XY[0] <= 500){
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <Joystick_detection+0x120>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000630:	d802      	bhi.n	8000638 <Joystick_detection+0x44>
			  move_way = 1;
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <Joystick_detection+0x114>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick1_XY[1] >= 3500){
 8000638:	4b36      	ldr	r3, [pc, #216]	; (8000714 <Joystick_detection+0x120>)
 800063a:	885b      	ldrh	r3, [r3, #2]
 800063c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000640:	4293      	cmp	r3, r2
 8000642:	d902      	bls.n	800064a <Joystick_detection+0x56>
			  move_way = 2;
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <Joystick_detection+0x114>)
 8000646:	2202      	movs	r2, #2
 8000648:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick1_XY[1] <= 500){
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <Joystick_detection+0x120>)
 800064c:	885b      	ldrh	r3, [r3, #2]
 800064e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000652:	d802      	bhi.n	800065a <Joystick_detection+0x66>
			  move_way = 3;
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <Joystick_detection+0x114>)
 8000656:	2203      	movs	r2, #3
 8000658:	601a      	str	r2, [r3, #0]
		  }

		  JoyStick_Read(JoyStick2, JoyStick2_XY);
 800065a:	492f      	ldr	r1, [pc, #188]	; (8000718 <Joystick_detection+0x124>)
 800065c:	2001      	movs	r0, #1
 800065e:	f005 fc11 	bl	8005e84 <JoyStick_Read>

		  if(JoyStick2_XY[0] >= 3500){
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <Joystick_detection+0x124>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	f640 52ab 	movw	r2, #3499	; 0xdab
 800066a:	4293      	cmp	r3, r2
 800066c:	d902      	bls.n	8000674 <Joystick_detection+0x80>
			  direct_way = 2;
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <Joystick_detection+0x118>)
 8000670:	2202      	movs	r2, #2
 8000672:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick2_XY[0] <= 500){
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <Joystick_detection+0x124>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800067c:	d802      	bhi.n	8000684 <Joystick_detection+0x90>
			  direct_way = 3;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <Joystick_detection+0x118>)
 8000680:	2203      	movs	r2, #3
 8000682:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick2_XY[1] >= 3500){
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <Joystick_detection+0x124>)
 8000686:	885b      	ldrh	r3, [r3, #2]
 8000688:	f640 52ab 	movw	r2, #3499	; 0xdab
 800068c:	4293      	cmp	r3, r2
 800068e:	d902      	bls.n	8000696 <Joystick_detection+0xa2>
			  direct_way = 0;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <Joystick_detection+0x118>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
		  }
		  if(JoyStick2_XY[1] <= 500){
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <Joystick_detection+0x124>)
 8000698:	885b      	ldrh	r3, [r3, #2]
 800069a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800069e:	d802      	bhi.n	80006a6 <Joystick_detection+0xb2>
			  direct_way = 1;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <Joystick_detection+0x118>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <Joystick_detection+0x128>)
 80006aa:	f001 fb5b 	bl	8001d64 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d005      	beq.n	80006c0 <Joystick_detection+0xcc>
			  btn_way = 0;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <Joystick_detection+0x11c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
			  vTaskDelay(20);
 80006ba:	2014      	movs	r0, #20
 80006bc:	f006 fcb8 	bl	8007030 <vTaskDelay>
		  }
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 80006c0:	2102      	movs	r1, #2
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <Joystick_detection+0x12c>)
 80006c4:	f001 fb4e 	bl	8001d64 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d005      	beq.n	80006da <Joystick_detection+0xe6>
			  btn_way = 3;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <Joystick_detection+0x11c>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	601a      	str	r2, [r3, #0]
			  vTaskDelay(20);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f006 fcab 	bl	8007030 <vTaskDelay>
		  }

		  Press(move[move_way], direct[direct_way], button[btn_way]);
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <Joystick_detection+0x114>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <Joystick_detection+0x130>)
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	b2d8      	uxtb	r0, r3
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <Joystick_detection+0x118>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <Joystick_detection+0x134>)
 80006ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f0:	b2d9      	uxtb	r1, r3
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <Joystick_detection+0x11c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <Joystick_detection+0x138>)
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	f7ff ff34 	bl	800056c <Press>
		  move_way = 4;
 8000704:	e77a      	b.n	80005fc <Joystick_detection+0x8>
 8000706:	bf00      	nop
 8000708:	2000003c 	.word	0x2000003c
 800070c:	20000040 	.word	0x20000040
 8000710:	20000044 	.word	0x20000044
 8000714:	200001d0 	.word	0x200001d0
 8000718:	200001d4 	.word	0x200001d4
 800071c:	40020000 	.word	0x40020000
 8000720:	40020800 	.word	0x40020800
 8000724:	20000000 	.word	0x20000000
 8000728:	20000014 	.word	0x20000014
 800072c:	20000028 	.word	0x20000028

08000730 <Handler_TASK>:
	}
}

void Handler_TASK(void *pvParameters)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        if(xSemaphoreTake( xSemaphore,0xffff ) == pdTRUE)
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <Handler_TASK+0x44>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000740:	4618      	mov	r0, r3
 8000742:	f006 f8a5 	bl	8006890 <xQueueSemaphoreTake>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d1f5      	bne.n	8000738 <Handler_TASK+0x8>
        {
        	uint32_t From_begin_time = HAL_GetTick();
 800074c:	f000 fc90 	bl	8001070 <HAL_GetTick>
 8000750:	60f8      	str	r0, [r7, #12]
        	Press(0x14, 0x00, 0x00);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2014      	movs	r0, #20
 8000758:	f7ff ff08 	bl	800056c <Press>
        	while(HAL_GetTick() - From_begin_time < 250/portTICK_RATE_MS){
 800075c:	bf00      	nop
 800075e:	f000 fc87 	bl	8001070 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2bf9      	cmp	r3, #249	; 0xf9
 800076a:	d9f8      	bls.n	800075e <Handler_TASK+0x2e>
        	    ;
        	}
        	Sensor_init();
 800076c:	f7ff fed2 	bl	8000514 <Sensor_init>
        if(xSemaphoreTake( xSemaphore,0xffff ) == pdTRUE)
 8000770:	e7e2      	b.n	8000738 <Handler_TASK+0x8>
 8000772:	bf00      	nop
 8000774:	200001c0 	.word	0x200001c0

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fc41 	bl	8001004 <HAL_Init>

  /* USER CODE BEGIN Init */
  JoyStick_Init(JoyStick1);
 8000782:	2000      	movs	r0, #0
 8000784:	f005 f9ee 	bl	8005b64 <JoyStick_Init>
  JoyStick_Init(JoyStick2);
 8000788:	2001      	movs	r0, #1
 800078a:	f005 f9eb 	bl	8005b64 <JoyStick_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f839 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f995 	bl	8000ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000796:	f000 f95d 	bl	8000a54 <MX_SPI1_Init>

  MX_USB_DEVICE_Init();
 800079a:	f009 fd19 	bl	800a1d0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800079e:	f000 f899 	bl	80008d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007a2:	f000 f8f7 	bl	8000994 <MX_ADC2_Init>

  /* USER CODE BEGIN 2 */

  Sensor_init();
 80007a6:	f7ff feb5 	bl	8000514 <Sensor_init>
  xSemaphore = xSemaphoreCreateBinary();
 80007aa:	2203      	movs	r2, #3
 80007ac:	2100      	movs	r1, #0
 80007ae:	2001      	movs	r0, #1
 80007b0:	f005 fd0a 	bl	80061c8 <xQueueGenericCreate>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <main+0x74>)
 80007b8:	6013      	str	r3, [r2, #0]

  xTaskCreate(
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <main+0x78>)
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2301      	movs	r3, #1
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c8:	490a      	ldr	r1, [pc, #40]	; (80007f4 <main+0x7c>)
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <main+0x80>)
 80007cc:	f006 faf2 	bl	8006db4 <xTaskCreate>
  		  1000,
  		  NULL,
  		  1,
  		  &xHandle);

  xTaskCreate(Handler_TASK,
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <main+0x78>)
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2303      	movs	r3, #3
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2300      	movs	r3, #0
 80007da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007de:	4907      	ldr	r1, [pc, #28]	; (80007fc <main+0x84>)
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <main+0x88>)
 80007e2:	f006 fae7 	bl	8006db4 <xTaskCreate>
		  1000,
		  NULL,
		  3,
		  &xHandle);

  vTaskStartScheduler();
 80007e6:	f006 fc57 	bl	8007098 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x72>
 80007ec:	200001c0 	.word	0x200001c0
 80007f0:	200001cc 	.word	0x200001cc
 80007f4:	0800aae8 	.word	0x0800aae8
 80007f8:	080005f5 	.word	0x080005f5
 80007fc:	0800aaf4 	.word	0x0800aaf4
 8000800:	08000731 	.word	0x08000731

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00a f954 	bl	800aac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <SystemClock_Config+0xc8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a26      	ldr	r2, [pc, #152]	; (80008cc <SystemClock_Config+0xc8>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <SystemClock_Config+0xc8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <SystemClock_Config+0xcc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <SystemClock_Config+0xcc>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000878:	2348      	movs	r3, #72	; 0x48
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000880:	2303      	movs	r3, #3
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fc21 	bl	80030d0 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 fa02 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fe83 	bl	80035c0 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 f9ec 	bl	8000c9c <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_ADC1_Init+0xb4>)
 80008e8:	4a28      	ldr	r2, [pc, #160]	; (800098c <MX_ADC1_Init+0xb8>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_ADC1_Init+0xb4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_ADC1_Init+0xb4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_ADC1_Init+0xb4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ADC1_Init+0xb4>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <MX_ADC1_Init+0xbc>)
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_ADC1_Init+0xb4>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000920:	2202      	movs	r2, #2
 8000922:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_ADC1_Init+0xb4>)
 800092e:	2201      	movs	r2, #1
 8000930:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000934:	f000 fbcc 	bl	80010d0 <HAL_ADC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f9ad 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000942:	230a      	movs	r3, #10
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800094a:	2307      	movs	r3, #7
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000954:	f000 fd6a 	bl	800142c <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800095e:	f000 f99d 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000962:	230c      	movs	r3, #12
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_ADC1_Init+0xb4>)
 8000970:	f000 fd5c 	bl	800142c <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800097a:	f000 f98f 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2001303c 	.word	0x2001303c
 800098c:	40012000 	.word	0x40012000
 8000990:	0f000001 	.word	0x0f000001

08000994 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009a8:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_ADC2_Init+0xb8>)
 80009aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_ADC2_Init+0xbc>)
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_ADC2_Init+0xb4>)
 80009f4:	f000 fb6c 	bl	80010d0 <HAL_ADC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f94d 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a02:	2308      	movs	r3, #8
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_ADC2_Init+0xb4>)
 8000a14:	f000 fd0a 	bl	800142c <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000a1e:	f000 f93d 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a22:	2309      	movs	r3, #9
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_ADC2_Init+0xb4>)
 8000a30:	f000 fcfc 	bl	800142c <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a3a:	f000 f92f 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20012ff0 	.word	0x20012ff0
 8000a4c:	40012100 	.word	0x40012100
 8000a50:	0f000001 	.word	0x0f000001

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa6:	f002 ffa5 	bl	80039f4 <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 f8f4 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20013084 	.word	0x20013084
 8000abc:	40013000 	.word	0x40013000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a61      	ldr	r2, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b5f      	ldr	r3, [pc, #380]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a5a      	ldr	r2, [pc, #360]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b54      	ldr	r3, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a53      	ldr	r2, [pc, #332]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <MX_GPIO_Init+0x1a4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2108      	movs	r1, #8
 8000b82:	4839      	ldr	r0, [pc, #228]	; (8000c68 <MX_GPIO_Init+0x1a8>)
 8000b84:	f001 f906 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MX_GPIO_Init+0x1ac>)
 8000b90:	f001 f900 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b94:	2308      	movs	r3, #8
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x1a8>)
 8000bac:	f000 ff3e 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <MX_GPIO_Init+0x1b0>)
 8000bc4:	f000 ff32 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_GPIO_Init+0x1a8>)
 8000bde:	f000 ff25 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000be2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481c      	ldr	r0, [pc, #112]	; (8000c6c <MX_GPIO_Init+0x1ac>)
 8000bfc:	f000 ff16 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4815      	ldr	r0, [pc, #84]	; (8000c6c <MX_GPIO_Init+0x1ac>)
 8000c16:	f000 ff09 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <MX_GPIO_Init+0x1b4>)
 8000c2e:	f000 fefd 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_GPIO_Init+0x1a8>)
 8000c48:	f000 fef0 	bl	8001a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	210f      	movs	r1, #15
 8000c50:	2006      	movs	r0, #6
 8000c52:	f000 fec1 	bl	80019d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c56:	2006      	movs	r0, #6
 8000c58:	f000 feda 	bl	8001a10 <HAL_NVIC_EnableIRQ>

}
 8000c5c:	bf00      	nop
 8000c5e:	3730      	adds	r7, #48	; 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40020c00 	.word	0x40020c00
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 f9dd 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40001400 	.word	0x40001400

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d128      	bne.n	8000d6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000d52:	2305      	movs	r3, #5
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d66:	f000 fe61 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d6a:	e02c      	b.n	8000dc6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d127      	bne.n	8000dc6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dae:	2303      	movs	r3, #3
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <HAL_ADC_MspInit+0xe8>)
 8000dc2:	f000 fe33 	bl	8001a2c <HAL_GPIO_Init>
}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	; 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40012100 	.word	0x40012100
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23e0      	movs	r3, #224	; 0xe0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f000 fde7 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	2037      	movs	r0, #55	; 0x37
 8000e8a:	f000 fda5 	bl	80019d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e8e:	2037      	movs	r0, #55	; 0x37
 8000e90:	f000 fdbe 	bl	8001a10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <HAL_InitTick+0xa4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_InitTick+0xa4>)
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f003 0320 	and.w	r3, r3, #32
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fd68 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ec0:	f002 fd52 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_InitTick+0xa8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_InitTick+0xac>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_InitTick+0xb0>)
 8000edc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_InitTick+0xac>)
 8000ee0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_InitTick+0xac>)
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_InitTick+0xac>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_InitTick+0xac>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <HAL_InitTick+0xac>)
 8000efa:	f003 f80b 	bl	8003f14 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <HAL_InitTick+0xac>)
 8000f06:	f003 f85f 	bl	8003fc8 <HAL_TIM_Base_Start_IT>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3730      	adds	r7, #48	; 0x30
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	200130dc 	.word	0x200130dc
 8000f24:	40001400 	.word	0x40001400

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f000 ff35 	bl	8001dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM7_IRQHandler+0x10>)
 8000f6a:	f003 f89d 	bl	80040a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200130dc 	.word	0x200130dc

08000f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <OTG_FS_IRQHandler+0x10>)
 8000f7e:	f001 f88b 	bl	8002098 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20013638 	.word	0x20013638

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fda:	f7ff ffd7 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f009 fd3d 	bl	800aa5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fbc9 	bl	8000778 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000ff4:	0800abb4 	.word	0x0800abb4
  ldr r2, =_sbss
 8000ff8:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000ffc:	20013a40 	.word	0x20013a40

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 fcc8 	bl	80019c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff ff1e 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe36 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000050 	.word	0x20000050
 800106c:	20013124 	.word	0x20013124

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20013124 	.word	0x20013124

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000050 	.word	0x20000050

080010d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e033      	b.n	800114e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fe02 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001116:	f023 0302 	bic.w	r3, r3, #2
 800111a:	f043 0202 	orr.w	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 faa4 	bl	8001670 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
 800113e:	e001      	b.n	8001144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Start+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e0b2      	b.n	80012d8 <HAL_ADC_Start+0x180>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d018      	beq.n	80011ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_ADC_Start+0x18c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_ADC_Start+0x190>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9a      	lsrs	r2, r3, #18
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d17a      	bne.n	80012be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	d106      	bne.n	8001216 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f023 0206 	bic.w	r2, r3, #6
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_ADC_Start+0x194>)
 8001226:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001230:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2b00      	cmp	r3, #0
 800123c:	d12a      	bne.n	8001294 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a2b      	ldr	r2, [pc, #172]	; (80012f0 <HAL_ADC_Start+0x198>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d015      	beq.n	8001274 <HAL_ADC_Start+0x11c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_ADC_Start+0x19c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d105      	bne.n	800125e <HAL_ADC_Start+0x106>
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_ADC_Start+0x194>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_ADC_Start+0x1a0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d136      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_ADC_Start+0x194>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d130      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d129      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	e020      	b.n	80012d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_ADC_Start+0x198>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d11b      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d114      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e00b      	b.n	80012d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000048 	.word	0x20000048
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	40012300 	.word	0x40012300
 80012f0:	40012000 	.word	0x40012000
 80012f4:	40012100 	.word	0x40012100
 80012f8:	40012200 	.word	0x40012200

080012fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d113      	bne.n	8001342 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001328:	d10b      	bne.n	8001342 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0220 	orr.w	r2, r3, #32
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e063      	b.n	800140a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001342:	f7ff fe95 	bl	8001070 <HAL_GetTick>
 8001346:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001348:	e021      	b.n	800138e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d01d      	beq.n	800138e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_ADC_PollForConversion+0x6c>
 8001358:	f7ff fe8a 	bl	8001070 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d212      	bcs.n	800138e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d00b      	beq.n	800138e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f043 0204 	orr.w	r2, r3, #4
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e03d      	b.n	800140a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d1d6      	bne.n	800134a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f06f 0212 	mvn.w	r2, #18
 80013a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d123      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11f      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c>
 8001444:	2302      	movs	r3, #2
 8001446:	e105      	b.n	8001654 <HAL_ADC_ConfigChannel+0x228>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d925      	bls.n	80014a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43da      	mvns	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	400a      	ands	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4403      	add	r3, r0
 8001496:	3b1e      	subs	r3, #30
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e022      	b.n	80014ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4403      	add	r3, r0
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d824      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	e04c      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d824      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	; 0x23
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	; 0x23
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	e023      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	; 0x41
 80015a0:	221f      	movs	r2, #31
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	; 0x41
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_ADC_ConfigChannel+0x234>)
 80015d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d123      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d003      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x1e6>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b11      	cmp	r3, #17
 8001610:	d11b      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b10      	cmp	r3, #16
 8001624:	d111      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_ADC_ConfigChannel+0x23c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_ADC_ConfigChannel+0x240>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9a      	lsrs	r2, r3, #18
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	40012000 	.word	0x40012000
 8001668:	20000048 	.word	0x20000048
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b79      	ldr	r3, [pc, #484]	; (8001860 <ADC_Init+0x1f0>)
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	4a58      	ldr	r2, [pc, #352]	; (8001864 <ADC_Init+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d022      	beq.n	800174e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e00f      	b.n	800176e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0202 	bic.w	r2, r2, #2
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	005a      	lsls	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	035a      	lsls	r2, r3, #13
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e007      	b.n	80017e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	051a      	lsls	r2, r3, #20
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001826:	025a      	lsls	r2, r3, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	029a      	lsls	r2, r3, #10
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	0f000001 	.word	0x0f000001

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff4c 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ea:	f7ff ff61 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff ffb1 	bl	800195c <NVIC_EncodePriority>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff80 	bl	8001908 <__NVIC_SetPriority>
}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff54 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e16b      	b.n	8001d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 815a 	bne.w	8001d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80b4 	beq.w	8001d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a5f      	ldr	r2, [pc, #380]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bce:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HAL_GPIO_Init+0x310>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <HAL_GPIO_Init+0x314>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_GPIO_Init+0x318>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_GPIO_Init+0x31c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x320>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_GPIO_Init+0x328>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x20a>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00e      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00c      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00a      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x310>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f ae90 	bls.w	8001a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbe2 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b08f      	sub	sp, #60	; 0x3c
 8001dfc:	af0a      	add	r7, sp, #40	; 0x28
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e10f      	b.n	800202a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f008 fb09 	bl	800a43c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fc26 	bl	800469a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	687e      	ldr	r6, [r7, #4]
 8001e56:	466d      	mov	r5, sp
 8001e58:	f106 0410 	add.w	r4, r6, #16
 8001e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e6c:	1d33      	adds	r3, r6, #4
 8001e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f002 fafd 	bl	8004470 <USB_CoreInit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d0      	b.n	800202a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fc14 	bl	80046bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e04a      	b.n	8001f30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333d      	adds	r3, #61	; 0x3d
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	333c      	adds	r3, #60	; 0x3c
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b298      	uxth	r0, r3
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3344      	adds	r3, #68	; 0x44
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3348      	adds	r3, #72	; 0x48
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3af      	bcc.n	8001e9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e044      	b.n	8001fca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3b5      	bcc.n	8001f40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	687e      	ldr	r6, [r7, #4]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0410 	add.w	r4, r6, #16
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff2:	1d33      	adds	r3, r6, #4
 8001ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f002 fbac 	bl	8004754 <USB_DevInit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00d      	b.n	800202a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fc28 	bl	8005878 <USB_DevDisconnect>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002032 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_Start+0x1c>
 800204a:	2302      	movs	r3, #2
 800204c:	e020      	b.n	8002090 <HAL_PCD_Start+0x5e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	2b01      	cmp	r3, #1
 800205c:	d109      	bne.n	8002072 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fafe 	bl	8004678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fbd8 	bl	8005836 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b08d      	sub	sp, #52	; 0x34
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fc96 	bl	80059e0 <USB_GetMode>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 839d 	bne.w	80027f6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fbfa 	bl	80058ba <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8393 	beq.w	80027f4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fbf1 	bl	80058ba <USB_ReadInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 0202 	and.w	r2, r2, #2
 80020f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fbdf 	bl	80058ba <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b10      	cmp	r3, #16
 8002104:	d161      	bne.n	80021ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0210 	bic.w	r2, r2, #16
 8002114:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 020f 	and.w	r2, r3, #15
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	0c5b      	lsrs	r3, r3, #17
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	2b02      	cmp	r3, #2
 8002140:	d124      	bne.n	800218c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d035      	beq.n	80021ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	6a38      	ldr	r0, [r7, #32]
 8002162:	f003 fa16 	bl	8005592 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002172:	441a      	add	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002184:	441a      	add	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	619a      	str	r2, [r3, #24]
 800218a:	e016      	b.n	80021ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	2b06      	cmp	r3, #6
 8002196:	d110      	bne.n	80021ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800219e:	2208      	movs	r2, #8
 80021a0:	4619      	mov	r1, r3
 80021a2:	6a38      	ldr	r0, [r7, #32]
 80021a4:	f003 f9f5 	bl	8005592 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b4:	441a      	add	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0210 	orr.w	r2, r2, #16
 80021c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fb73 	bl	80058ba <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021de:	d16e      	bne.n	80022be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fb79 	bl	80058e0 <USB_ReadDevAllOutEpInterrupt>
 80021ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021f0:	e062      	b.n	80022b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d057      	beq.n	80022ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fb9e 	bl	8005948 <USB_ReadDevOutEPInterrupt>
 800220c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002224:	461a      	mov	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800222a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fd99 	bl	8002d64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	2308      	movs	r3, #8
 800224c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800224e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fe93 	bl	8002f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	2310      	movs	r3, #16
 8002270:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	2320      	movs	r3, #32
 800228c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	3301      	adds	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d199      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 faf9 	bl	80058ba <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022d2:	f040 80c0 	bne.w	8002456 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fb1a 	bl	8005914 <USB_ReadDevAllInEpInterrupt>
 80022e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022e6:	e0b2      	b.n	800244e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a7 	beq.w	8002442 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fb40 	bl	8005984 <USB_ReadDevInEPInterrupt>
 8002304:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d057      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	2201      	movs	r2, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	69f9      	ldr	r1, [r7, #28]
 800232c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002330:	4013      	ands	r3, r2
 8002332:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002340:	461a      	mov	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d132      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3348      	adds	r3, #72	; 0x48
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4403      	add	r3, r0
 800236e:	3344      	adds	r3, #68	; 0x44
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4419      	add	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4403      	add	r3, r0
 8002382:	3348      	adds	r3, #72	; 0x48
 8002384:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d113      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x31c>
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3350      	adds	r3, #80	; 0x50
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ac:	461a      	mov	r2, r3
 80023ae:	2101      	movs	r1, #1
 80023b0:	f003 fb48 	bl	8005a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f008 f8cd 	bl	800a55a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d6:	461a      	mov	r2, r3
 80023d8:	2308      	movs	r3, #8
 80023da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f2:	461a      	mov	r2, r3
 80023f4:	2310      	movs	r3, #16
 80023f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800240e:	461a      	mov	r2, r3
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800242a:	461a      	mov	r2, r3
 800242c:	2302      	movs	r3, #2
 800242e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800243a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fc03 	bl	8002c48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f af49 	bne.w	80022e8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fa2d 	bl	80058ba <USB_ReadInterrupts>
 8002460:	4603      	mov	r3, r0
 8002462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800246a:	d122      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fe0f 	bl	80030b8 <HAL_PCDEx_LPM_Callback>
 800249a:	e002      	b.n	80024a2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f008 f8d3 	bl	800a648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f9ff 	bl	80058ba <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024c6:	d112      	bne.n	80024ee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f008 f88f 	bl	800a5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f9e1 	bl	80058ba <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	f040 80c7 	bne.w	8002694 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2110      	movs	r1, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fa7b 	bl	8004a1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	e056      	b.n	80025da <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800253e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002550:	0151      	lsls	r1, r2, #5
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	440a      	add	r2, r1
 8002556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800255a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800255e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	440a      	add	r2, r1
 8002576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800257a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800257e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	461a      	mov	r2, r3
 800258e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002592:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a4:	0151      	lsls	r1, r2, #5
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	440a      	add	r2, r1
 80025aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	3301      	adds	r3, #1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3a3      	bcc.n	800252c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d016      	beq.n	800262e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002610:	f043 030b 	orr.w	r3, r3, #11
 8002614:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f043 030b 	orr.w	r3, r3, #11
 800262a:	6453      	str	r3, [r2, #68]	; 0x44
 800262c:	e015      	b.n	800265a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002640:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002644:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002654:	f043 030b 	orr.w	r3, r3, #11
 8002658:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002668:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800266c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800267e:	461a      	mov	r2, r3
 8002680:	f003 f9e0 	bl	8005a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f003 f90e 	bl	80058ba <USB_ReadInterrupts>
 800269e:	4603      	mov	r3, r0
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d124      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 f9a4 	bl	80059fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fa0c 	bl	8004ad6 <USB_GetDevSpeed>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681c      	ldr	r4, [r3, #0]
 80026ca:	f001 f941 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 80026ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4620      	mov	r0, r4
 80026da:	f001 ff2b 	bl	8004534 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f007 ff63 	bl	800a5aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 f8de 	bl	80058ba <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b08      	cmp	r3, #8
 8002706:	d10a      	bne.n	800271e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f007 ff40 	bl	800a58e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 0208 	and.w	r2, r2, #8
 800271c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f8c9 	bl	80058ba <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002732:	d10f      	bne.n	8002754 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f007 ffa2 	bl	800a688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f8ae 	bl	80058ba <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002768:	d10f      	bne.n	800278a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f007 ff75 	bl	800a664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 f893 	bl	80058ba <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d10a      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f007 ff83 	bl	800a6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f87d 	bl	80058ba <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d115      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f007 ff73 	bl	800a6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e000      	b.n	80027f6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80027f4:	bf00      	nop
    }
  }
}
 80027f6:	3734      	adds	r7, #52	; 0x34
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}

080027fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_PCD_SetAddress+0x1a>
 8002812:	2302      	movs	r3, #2
 8002814:	e013      	b.n	800283e <HAL_PCD_SetAddress+0x42>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f002 ffdb 	bl	80057ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	4608      	mov	r0, r1
 8002850:	4611      	mov	r1, r2
 8002852:	461a      	mov	r2, r3
 8002854:	4603      	mov	r3, r0
 8002856:	70fb      	strb	r3, [r7, #3]
 8002858:	460b      	mov	r3, r1
 800285a:	803b      	strh	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da0f      	bge.n	800288c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3338      	adds	r3, #56	; 0x38
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	705a      	strb	r2, [r3, #1]
 800288a:	e00f      	b.n	80028ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028b8:	883a      	ldrh	r2, [r7, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	78ba      	ldrb	r2, [r7, #2]
 80028c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028d6:	78bb      	ldrb	r3, [r7, #2]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d102      	bne.n	80028e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_EP_Open+0xaa>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e00e      	b.n	800290e <HAL_PCD_EP_Open+0xc8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 f90e 	bl	8004b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800290c:	7afb      	ldrb	r3, [r7, #11]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	da0f      	bge.n	800294a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3338      	adds	r3, #56	; 0x38
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
 8002948:	e00f      	b.n	800296a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_PCD_EP_Close+0x6e>
 8002980:	2302      	movs	r3, #2
 8002982:	e00e      	b.n	80029a2 <HAL_PCD_EP_Close+0x8c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	4618      	mov	r0, r3
 8002994:	f002 f94c 	bl	8004c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	460b      	mov	r3, r1
 80029b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6979      	ldr	r1, [r7, #20]
 8002a1e:	f002 fc27 	bl	8005270 <USB_EP0StartXfer>
 8002a22:	e008      	b.n	8002a36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6979      	ldr	r1, [r7, #20]
 8002a32:	f002 f9d9 	bl	8004de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3338      	adds	r3, #56	; 0x38
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6979      	ldr	r1, [r7, #20]
 8002ab2:	f002 fbdd 	bl	8005270 <USB_EP0StartXfer>
 8002ab6:	e008      	b.n	8002aca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	f002 f98f 	bl	8004de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d901      	bls.n	8002af2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e050      	b.n	8002b94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da0f      	bge.n	8002b1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3338      	adds	r3, #56	; 0x38
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	705a      	strb	r2, [r3, #1]
 8002b18:	e00d      	b.n	8002b36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_PCD_EP_SetStall+0x82>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e01e      	b.n	8002b94 <HAL_PCD_EP_SetStall+0xc0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fd6c 	bl	8005642 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	b2d9      	uxtb	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b84:	461a      	mov	r2, r3
 8002b86:	f002 ff5d 	bl	8005a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d901      	bls.n	8002bba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e042      	b.n	8002c40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da0f      	bge.n	8002be2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3338      	adds	r3, #56	; 0x38
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
 8002be0:	e00f      	b.n	8002c02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 020f 	and.w	r2, r3, #15
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_EP_ClrStall+0x86>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e00e      	b.n	8002c40 <HAL_PCD_EP_ClrStall+0xa4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fd74 	bl	800571e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	3338      	adds	r3, #56	; 0x38
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d901      	bls.n	8002c80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e06c      	b.n	8002d5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d902      	bls.n	8002c9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3303      	adds	r3, #3
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca4:	e02b      	b.n	8002cfe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d902      	bls.n	8002cc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68d9      	ldr	r1, [r3, #12]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f002 fc18 	bl	8005516 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	441a      	add	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d809      	bhi.n	8002d28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d203      	bcs.n	8002d28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1be      	bne.n	8002ca6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d811      	bhi.n	8002d58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d54:	4013      	ands	r3, r2
 8002d56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	333c      	adds	r3, #60	; 0x3c
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	f040 80a0 	bne.w	8002edc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f240 80dd 	bls.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80d7 	beq.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	e0cb      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]
 8002dee:	e0bc      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80b7 	bne.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d90f      	bls.n	8002e24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e20:	6093      	str	r3, [r2, #8]
 8002e22:	e0a2      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4403      	add	r3, r0
 8002e5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4403      	add	r3, r0
 8002e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4419      	add	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d114      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x16a>
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2101      	movs	r1, #1
 8002eca:	f002 fdbb 	bl	8005a44 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f007 fb25 	bl	800a524 <HAL_PCD_DataOutStageCallback>
 8002eda:	e046      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <PCD_EP_OutXfrComplete_int+0x214>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d124      	bne.n	8002f2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e032      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f007 fafc 	bl	800a524 <HAL_PCD_DataOutStageCallback>
 8002f2c:	e01d      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d114      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f56:	461a      	mov	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f002 fd73 	bl	8005a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f007 fadd 	bl	800a524 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	4f54300a 	.word	0x4f54300a
 8002f78:	4f54310a 	.word	0x4f54310a

08002f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	333c      	adds	r3, #60	; 0x3c
 8002f94:	3304      	adds	r3, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d90e      	bls.n	8002fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f007 fa95 	bl	800a500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90c      	bls.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	f002 fd26 	bl	8005a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	4f54300a 	.word	0x4f54300a

08003008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
 8003014:	4613      	mov	r3, r2
 8003016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003026:	883b      	ldrh	r3, [r7, #0]
 8003028:	0419      	lsls	r1, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	430a      	orrs	r2, r1
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
 8003034:	e028      	b.n	8003088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e00d      	b.n	8003066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3340      	adds	r3, #64	; 0x40
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	4413      	add	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	3301      	adds	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	3b01      	subs	r3, #1
 800306c:	429a      	cmp	r2, r3
 800306e:	d3ec      	bcc.n	800304a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003070:	883b      	ldrh	r3, [r7, #0]
 8003072:	0418      	lsls	r0, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	3b01      	subs	r3, #1
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4302      	orrs	r2, r0
 8003080:	3340      	adds	r3, #64	; 0x40
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e264      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	4ba3      	ldr	r3, [pc, #652]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4ba0      	ldr	r3, [pc, #640]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b9d      	ldr	r3, [pc, #628]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b99      	ldr	r3, [pc, #612]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e23f      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b8b      	ldr	r3, [pc, #556]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8a      	ldr	r2, [pc, #552]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a87      	ldr	r2, [pc, #540]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a80      	ldr	r2, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd ff72 	bl	8001070 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd ff6e 	bl	8001070 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e204      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b76      	ldr	r3, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd ff5e 	bl	8001070 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd ff5a 	bl	8001070 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1f0      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b6c      	ldr	r3, [pc, #432]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b62      	ldr	r3, [pc, #392]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b5c      	ldr	r3, [pc, #368]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c4      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4952      	ldr	r1, [pc, #328]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd ff13 	bl	8001070 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd ff0f 	bl	8001070 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a5      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4940      	ldr	r1, [pc, #256]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd fef2 	bl	8001070 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fd feee 	bl	8001070 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e184      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d030      	beq.n	800331c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd fed2 	bl	8001070 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd fece 	bl	8001070 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e164      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fd febb 	bl	8001070 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fd feb7 	bl	8001070 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e14d      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a0 	beq.w	800346a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d121      	bne.n	80033aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fd fe7d 	bl	8001070 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e011      	b.n	800339e <HAL_RCC_OscConfig+0x2ce>
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
 8003388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fe70 	bl	8001070 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e106      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x4e4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a80      	ldr	r2, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x312>
 80033c8:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033e2:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fe35 	bl	8001070 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd fe31 	bl	8001070 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0c5      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x33a>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fd fe1f 	bl	8001070 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd fe1b 	bl	8001070 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0af      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 809b 	beq.w	80035aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d05c      	beq.n	800353a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d141      	bne.n	800350c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fdef 	bl	8001070 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fdeb 	bl	8001070 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e081      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fdc4 	bl	8001070 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fdc0 	bl	8001070 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e056      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x41c>
 800350a:	e04e      	b.n	80035aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fdad 	bl	8001070 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fda9 	bl	8001070 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e03f      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
 8003538:	e037      	b.n	80035aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e032      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003546:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d028      	beq.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d11a      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40007000 	.word	0x40007000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470060 	.word	0x42470060

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cc      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d90c      	bls.n	80035fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	2b03      	cmp	r3, #3
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e067      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0203 	bic.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4934      	ldr	r1, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fd fcde 	bl	8001070 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fd fcda 	bl	8001070 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 020c 	and.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1eb      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d20c      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fb84 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	0800ab5c 	.word	0x0800ab5c
 8003784:	20000048 	.word	0x20000048
 8003788:	2000004c 	.word	0x2000004c

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	2300      	movs	r3, #0
 800379e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80bd 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0b7      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037c2:	60bb      	str	r3, [r7, #8]
       break;
 80037c4:	e0b7      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e0b4      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b5d      	ldr	r3, [pc, #372]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04d      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	461a      	mov	r2, r3
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	ea02 0800 	and.w	r8, r2, r0
 80037fa:	ea03 0901 	and.w	r9, r3, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	014b      	lsls	r3, r1, #5
 800380c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003810:	0142      	lsls	r2, r0, #5
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	ebb0 0008 	subs.w	r0, r0, r8
 800381a:	eb61 0109 	sbc.w	r1, r1, r9
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	018b      	lsls	r3, r1, #6
 8003828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800382c:	0182      	lsls	r2, r0, #6
 800382e:	1a12      	subs	r2, r2, r0
 8003830:	eb63 0301 	sbc.w	r3, r3, r1
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	00d9      	lsls	r1, r3, #3
 800383e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003842:	00d0      	lsls	r0, r2, #3
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	eb12 0208 	adds.w	r2, r2, r8
 800384c:	eb43 0309 	adc.w	r3, r3, r9
 8003850:	f04f 0000 	mov.w	r0, #0
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	0259      	lsls	r1, r3, #9
 800385a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800385e:	0250      	lsls	r0, r2, #9
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f7fc fcae 	bl	80001d0 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e04a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	ea02 0400 	and.w	r4, r2, r0
 8003896:	ea03 0501 	and.w	r5, r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	014b      	lsls	r3, r1, #5
 80038a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038ac:	0142      	lsls	r2, r0, #5
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	1b00      	subs	r0, r0, r4
 80038b4:	eb61 0105 	sbc.w	r1, r1, r5
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	018b      	lsls	r3, r1, #6
 80038c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038c6:	0182      	lsls	r2, r0, #6
 80038c8:	1a12      	subs	r2, r2, r0
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	00d9      	lsls	r1, r3, #3
 80038d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038dc:	00d0      	lsls	r0, r2, #3
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	1912      	adds	r2, r2, r4
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0299      	lsls	r1, r3, #10
 80038f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038f6:	0290      	lsls	r0, r2, #10
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f7fc fc62 	bl	80001d0 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	60bb      	str	r3, [r7, #8]
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003932:	60bb      	str	r3, [r7, #8]
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	68bb      	ldr	r3, [r7, #8]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000048 	.word	0x20000048

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800ab6c 	.word	0x0800ab6c

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	220f      	movs	r2, #15
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetClockConfig+0x60>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0207 	and.w	r2, r3, #7
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07b      	b.n	8003afe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a16:	d009      	beq.n	8003a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	e005      	b.n	8003a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd f9cc 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	ea42 0103 	orr.w	r1, r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	f003 0104 	and.w	r1, r3, #4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0210 	and.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b088      	sub	sp, #32
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_SPI_Transmit+0x22>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e126      	b.n	8003d76 <HAL_SPI_Transmit+0x270>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b30:	f7fd fa9e 	bl	8001070 <HAL_GetTick>
 8003b34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b4a:	e10b      	b.n	8003d64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_SPI_Transmit+0x52>
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b5c:	e102      	b.n	8003d64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2203      	movs	r2, #3
 8003b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d007      	beq.n	8003be4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	d14b      	bne.n	8003c86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0xf6>
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d13e      	bne.n	8003c7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c20:	e02b      	b.n	8003c7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d112      	bne.n	8003c56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c54:	e011      	b.n	8003c7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c56:	f7fd fa0b 	bl	8001070 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d803      	bhi.n	8003c6e <HAL_SPI_Transmit+0x168>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_Transmit+0x16e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c78:	e074      	b.n	8003d64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ce      	bne.n	8003c22 <HAL_SPI_Transmit+0x11c>
 8003c84:	e04c      	b.n	8003d20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Transmit+0x18e>
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d140      	bne.n	8003d16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cba:	e02c      	b.n	8003d16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d113      	bne.n	8003cf2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cf0:	e011      	b.n	8003d16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf2:	f7fd f9bd 	bl	8001070 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d803      	bhi.n	8003d0a <HAL_SPI_Transmit+0x204>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d102      	bne.n	8003d10 <HAL_SPI_Transmit+0x20a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d14:	e026      	b.n	8003d64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cd      	bne.n	8003cbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f8b3 	bl	8003e90 <SPI_EndRxTxTransaction>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e000      	b.n	8003d64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d90:	f7fd f96e 	bl	8001070 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da0:	f7fd f966 	bl	8001070 <HAL_GetTick>
 8003da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	015b      	lsls	r3, r3, #5
 8003dac:	0d1b      	lsrs	r3, r3, #20
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db6:	e054      	b.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d050      	beq.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc0:	f7fd f956 	bl	8001070 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d902      	bls.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d13d      	bne.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d111      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df8:	d004      	beq.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d107      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1c:	d10f      	bne.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e017      	b.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d19b      	bne.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000048 	.word	0x20000048

08003e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <SPI_EndRxTxTransaction+0x7c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <SPI_EndRxTxTransaction+0x80>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0d5b      	lsrs	r3, r3, #21
 8003ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d112      	bne.n	8003ee2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ff5a 	bl	8003d80 <SPI_WaitFlagStateUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d0f2      	beq.n	8003ee2 <SPI_EndRxTxTransaction+0x52>
 8003efc:	e000      	b.n	8003f00 <SPI_EndRxTxTransaction+0x70>
        break;
 8003efe:	bf00      	nop
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000048 	.word	0x20000048
 8003f10:	165e9f81 	.word	0x165e9f81

08003f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f839 	bl	8003fb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 f9d8 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04e      	b.n	800407e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d01d      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_TIM_Base_Start_IT+0xc8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_TIM_Base_Start_IT+0xcc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_TIM_Base_Start_IT+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_TIM_Base_Start_IT+0xd4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d010      	beq.n	800407c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	e007      	b.n	800407c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800

080040a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0202 	mvn.w	r2, #2
 80040d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8ee 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8e0 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8f1 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0204 	mvn.w	r2, #4
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8c4 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8b6 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8c7 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0208 	mvn.w	r2, #8
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2204      	movs	r2, #4
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f89a 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f88c 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f89d 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0210 	mvn.w	r2, #16
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2208      	movs	r2, #8
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f870 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f862 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f873 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0201 	mvn.w	r2, #1
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fd26 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f902 	bl	800445c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f838 	bl	80042f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0220 	mvn.w	r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8cc 	bl	8004448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a40      	ldr	r2, [pc, #256]	; (800441c <TIM_Base_SetConfig+0x114>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d00f      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3d      	ldr	r2, [pc, #244]	; (8004420 <TIM_Base_SetConfig+0x118>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <TIM_Base_SetConfig+0x11c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <TIM_Base_SetConfig+0x120>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3a      	ldr	r2, [pc, #232]	; (800442c <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2f      	ldr	r2, [pc, #188]	; (800441c <TIM_Base_SetConfig+0x114>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d027      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <TIM_Base_SetConfig+0x118>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d023      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <TIM_Base_SetConfig+0x11c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <TIM_Base_SetConfig+0x120>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a29      	ldr	r2, [pc, #164]	; (800442c <TIM_Base_SetConfig+0x124>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a28      	ldr	r2, [pc, #160]	; (8004430 <TIM_Base_SetConfig+0x128>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <TIM_Base_SetConfig+0x12c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a26      	ldr	r2, [pc, #152]	; (8004438 <TIM_Base_SetConfig+0x130>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <TIM_Base_SetConfig+0x134>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a24      	ldr	r2, [pc, #144]	; (8004440 <TIM_Base_SetConfig+0x138>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <TIM_Base_SetConfig+0x13c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0c      	ldr	r2, [pc, #48]	; (800442c <TIM_Base_SetConfig+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40010400 	.word	0x40010400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800
 800443c:	40001800 	.word	0x40001800
 8004440:	40001c00 	.word	0x40001c00
 8004444:	40002000 	.word	0x40002000

08004448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004470:	b084      	sub	sp, #16
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	f107 001c 	add.w	r0, r7, #28
 800447e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d122      	bne.n	80044ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800449c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 fb1c 	bl	8005b00 <USB_CoreReset>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e01a      	b.n	8004504 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f001 fb10 	bl	8005b00 <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
 80044f6:	e005      	b.n	8004504 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10b      	bne.n	8004522 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f043 0206 	orr.w	r2, r3, #6
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800452e:	b004      	add	sp, #16
 8004530:	4770      	bx	lr
	...

08004534 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d165      	bne.n	8004614 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a41      	ldr	r2, [pc, #260]	; (8004650 <USB_SetTurnaroundTime+0x11c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d906      	bls.n	800455e <USB_SetTurnaroundTime+0x2a>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a40      	ldr	r2, [pc, #256]	; (8004654 <USB_SetTurnaroundTime+0x120>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d202      	bcs.n	800455e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004558:	230f      	movs	r3, #15
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e062      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <USB_SetTurnaroundTime+0x120>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d306      	bcc.n	8004574 <USB_SetTurnaroundTime+0x40>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4a3b      	ldr	r2, [pc, #236]	; (8004658 <USB_SetTurnaroundTime+0x124>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d202      	bcs.n	8004574 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800456e:	230e      	movs	r3, #14
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e057      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a38      	ldr	r2, [pc, #224]	; (8004658 <USB_SetTurnaroundTime+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d306      	bcc.n	800458a <USB_SetTurnaroundTime+0x56>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a37      	ldr	r2, [pc, #220]	; (800465c <USB_SetTurnaroundTime+0x128>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d202      	bcs.n	800458a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004584:	230d      	movs	r3, #13
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e04c      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a33      	ldr	r2, [pc, #204]	; (800465c <USB_SetTurnaroundTime+0x128>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d306      	bcc.n	80045a0 <USB_SetTurnaroundTime+0x6c>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4a32      	ldr	r2, [pc, #200]	; (8004660 <USB_SetTurnaroundTime+0x12c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d802      	bhi.n	80045a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800459a:	230c      	movs	r3, #12
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e041      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a2f      	ldr	r2, [pc, #188]	; (8004660 <USB_SetTurnaroundTime+0x12c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d906      	bls.n	80045b6 <USB_SetTurnaroundTime+0x82>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4a2e      	ldr	r2, [pc, #184]	; (8004664 <USB_SetTurnaroundTime+0x130>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d802      	bhi.n	80045b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045b0:	230b      	movs	r3, #11
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e036      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <USB_SetTurnaroundTime+0x130>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d906      	bls.n	80045cc <USB_SetTurnaroundTime+0x98>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <USB_SetTurnaroundTime+0x134>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045c6:	230a      	movs	r3, #10
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e02b      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a26      	ldr	r2, [pc, #152]	; (8004668 <USB_SetTurnaroundTime+0x134>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d906      	bls.n	80045e2 <USB_SetTurnaroundTime+0xae>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a25      	ldr	r2, [pc, #148]	; (800466c <USB_SetTurnaroundTime+0x138>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d202      	bcs.n	80045e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045dc:	2309      	movs	r3, #9
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e020      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <USB_SetTurnaroundTime+0x138>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d306      	bcc.n	80045f8 <USB_SetTurnaroundTime+0xc4>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <USB_SetTurnaroundTime+0x13c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d802      	bhi.n	80045f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045f2:	2308      	movs	r3, #8
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e015      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <USB_SetTurnaroundTime+0x13c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d906      	bls.n	800460e <USB_SetTurnaroundTime+0xda>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <USB_SetTurnaroundTime+0x140>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d202      	bcs.n	800460e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004608:	2307      	movs	r3, #7
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e00a      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800460e:	2306      	movs	r3, #6
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e007      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800461a:	2309      	movs	r3, #9
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e001      	b.n	8004624 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004620:	2309      	movs	r3, #9
 8004622:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	029b      	lsls	r3, r3, #10
 8004638:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	00d8acbf 	.word	0x00d8acbf
 8004654:	00e4e1c0 	.word	0x00e4e1c0
 8004658:	00f42400 	.word	0x00f42400
 800465c:	01067380 	.word	0x01067380
 8004660:	011a499f 	.word	0x011a499f
 8004664:	01312cff 	.word	0x01312cff
 8004668:	014ca43f 	.word	0x014ca43f
 800466c:	016e3600 	.word	0x016e3600
 8004670:	01a6ab1f 	.word	0x01a6ab1f
 8004674:	01e84800 	.word	0x01e84800

08004678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f043 0201 	orr.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d115      	bne.n	800470a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046ea:	2001      	movs	r0, #1
 80046ec:	f7fc fccc 	bl	8001088 <HAL_Delay>
      ms++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 f972 	bl	80059e0 <USB_GetMode>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d01e      	beq.n	8004740 <USB_SetCurrentMode+0x84>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b31      	cmp	r3, #49	; 0x31
 8004706:	d9f0      	bls.n	80046ea <USB_SetCurrentMode+0x2e>
 8004708:	e01a      	b.n	8004740 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d115      	bne.n	800473c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800471c:	2001      	movs	r0, #1
 800471e:	f7fc fcb3 	bl	8001088 <HAL_Delay>
      ms++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 f959 	bl	80059e0 <USB_GetMode>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <USB_SetCurrentMode+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b31      	cmp	r3, #49	; 0x31
 8004738:	d9f0      	bls.n	800471c <USB_SetCurrentMode+0x60>
 800473a:	e001      	b.n	8004740 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e005      	b.n	800474c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b32      	cmp	r3, #50	; 0x32
 8004744:	d101      	bne.n	800474a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004754:	b084      	sub	sp, #16
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e009      	b.n	8004788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3340      	adds	r3, #64	; 0x40
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	2200      	movs	r2, #0
 8004780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3301      	adds	r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b0e      	cmp	r3, #14
 800478c:	d9f2      	bls.n	8004774 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800478e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11c      	bne.n	80047ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
 80047cc:	e00b      	b.n	80047e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	4619      	mov	r1, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	461a      	mov	r2, r3
 8004802:	680b      	ldr	r3, [r1, #0]
 8004804:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10c      	bne.n	8004826 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004812:	2100      	movs	r1, #0
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f945 	bl	8004aa4 <USB_SetDevSpeed>
 800481a:	e008      	b.n	800482e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800481c:	2101      	movs	r1, #1
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f940 	bl	8004aa4 <USB_SetDevSpeed>
 8004824:	e003      	b.n	800482e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004826:	2103      	movs	r1, #3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f93b 	bl	8004aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800482e:	2110      	movs	r1, #16
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8f3 	bl	8004a1c <USB_FlushTxFifo>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f90f 	bl	8004a64 <USB_FlushRxFifo>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	461a      	mov	r2, r3
 8004858:	2300      	movs	r3, #0
 800485a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	e043      	b.n	8004902 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800488c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004890:	d118      	bne.n	80048c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e013      	b.n	80048d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	461a      	mov	r2, r3
 80048bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e008      	b.n	80048d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	461a      	mov	r2, r3
 80048d2:	2300      	movs	r3, #0
 80048d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	461a      	mov	r2, r3
 80048f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	3301      	adds	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3b7      	bcc.n	800487a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e043      	b.n	8004998 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d118      	bne.n	800495a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e013      	b.n	800496c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	461a      	mov	r2, r3
 8004952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e008      	b.n	800496c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	2300      	movs	r3, #0
 800496a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3b7      	bcc.n	8004910 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <USB_DevInit+0x2c4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f043 0208 	orr.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d107      	bne.n	8004a08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a14:	b004      	add	sp, #16
 8004a16:	4770      	bx	lr
 8004a18:	803c3800 	.word	0x803c3800

08004a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <USB_FlushTxFifo+0x44>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d0f1      	beq.n	8004a36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	00030d40 	.word	0x00030d40

08004a64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2210      	movs	r2, #16
 8004a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <USB_FlushRxFifo+0x3c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e006      	b.n	8004a94 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d0f1      	beq.n	8004a76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	00030d40 	.word	0x00030d40

08004aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
 8004afa:	e00a      	b.n	8004b12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d002      	beq.n	8004b08 <USB_GetDevSpeed+0x32>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d102      	bne.n	8004b0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	75fb      	strb	r3, [r7, #23]
 8004b0c:	e001      	b.n	8004b12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b0e:	230f      	movs	r3, #15
 8004b10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d13a      	bne.n	8004bb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d155      	bne.n	8004c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	059b      	lsls	r3, r3, #22
 8004b96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e036      	b.n	8004c20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11a      	bne.n	8004c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	78db      	ldrb	r3, [r3, #3]
 8004c04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c06:	430b      	orrs	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d161      	bne.n	8004d10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c62:	d11f      	bne.n	8004ca4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <USB_DeactivateEndpoint+0x1b0>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	e060      	b.n	8004dd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d26:	d11f      	bne.n	8004d68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	43db      	mvns	r3, r3
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d88:	4013      	ands	r3, r2
 8004d8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	43db      	mvns	r3, r3
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dac:	4013      	ands	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0159      	lsls	r1, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <USB_DeactivateEndpoint+0x1b4>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	ec337800 	.word	0xec337800
 8004de4:	eff37800 	.word	0xeff37800

08004de8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 815c 	bne.w	80050c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d132      	bne.n	8004e78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	0cdb      	lsrs	r3, r3, #19
 8004e72:	04db      	lsls	r3, r3, #19
 8004e74:	6113      	str	r3, [r2, #16]
 8004e76:	e074      	b.n	8004f62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	0cdb      	lsrs	r3, r3, #19
 8004e94:	04db      	lsls	r3, r3, #19
 8004e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6959      	ldr	r1, [r3, #20]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	440b      	add	r3, r1
 8004ed4:	1e59      	subs	r1, r3, #1
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ede:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ee0:	4b9d      	ldr	r3, [pc, #628]	; (8005158 <USB_EPStartXfer+0x370>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	0148      	lsls	r0, r1, #5
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	4401      	add	r1, r0
 8004eec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	0148      	lsls	r0, r1, #5
 8004f0e:	69f9      	ldr	r1, [r7, #28]
 8004f10:	4401      	add	r1, r0
 8004f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d11f      	bne.n	8004f62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d14b      	bne.n	8005000 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d128      	bne.n	8004fde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d110      	bne.n	8004fbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e00f      	b.n	8004fde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e12f      	b.n	8005260 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800501e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	78db      	ldrb	r3, [r3, #3]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d015      	beq.n	8005054 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8117 	beq.w	8005260 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	69f9      	ldr	r1, [r7, #28]
 800504a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504e:	4313      	orrs	r3, r2
 8005050:	634b      	str	r3, [r1, #52]	; 0x34
 8005052:	e105      	b.n	8005260 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e00f      	b.n	80050a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	68d9      	ldr	r1, [r3, #12]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	b298      	uxth	r0, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4603      	mov	r3, r0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fa2b 	bl	8005516 <USB_WritePacket>
 80050c0:	e0ce      	b.n	8005260 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050dc:	0cdb      	lsrs	r3, r3, #19
 80050de:	04db      	lsls	r3, r3, #19
 80050e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005104:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d126      	bne.n	800515c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	0148      	lsls	r0, r1, #5
 8005128:	69f9      	ldr	r1, [r7, #28]
 800512a:	4401      	add	r1, r0
 800512c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005130:	4313      	orrs	r3, r2
 8005132:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005152:	6113      	str	r3, [r2, #16]
 8005154:	e036      	b.n	80051c4 <USB_EPStartXfer+0x3dc>
 8005156:	bf00      	nop
 8005158:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4413      	add	r3, r2
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	8afb      	ldrh	r3, [r7, #22]
 8005182:	04d9      	lsls	r1, r3, #19
 8005184:	4b39      	ldr	r3, [pc, #228]	; (800526c <USB_EPStartXfer+0x484>)
 8005186:	400b      	ands	r3, r1
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	0148      	lsls	r0, r1, #5
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	4401      	add	r1, r0
 8005190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005194:	4313      	orrs	r3, r2
 8005196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	8af9      	ldrh	r1, [r7, #22]
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b4:	69b9      	ldr	r1, [r7, #24]
 80051b6:	0148      	lsls	r0, r1, #5
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	4401      	add	r1, r0
 80051bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10d      	bne.n	80051e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	68d9      	ldr	r1, [r3, #12]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	460a      	mov	r2, r1
 80051e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	78db      	ldrb	r3, [r3, #3]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d128      	bne.n	8005240 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d110      	bne.n	8005220 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e00f      	b.n	8005240 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	1ff80000 	.word	0x1ff80000

08005270 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 80cd 	bne.w	800542c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d132      	bne.n	8005300 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	0cdb      	lsrs	r3, r3, #19
 80052fa:	04db      	lsls	r3, r3, #19
 80052fc:	6113      	str	r3, [r2, #16]
 80052fe:	e04e      	b.n	800539e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	0cdb      	lsrs	r3, r3, #19
 800531c:	04db      	lsls	r3, r3, #19
 800531e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800533e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005342:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d903      	bls.n	8005358 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538e:	6939      	ldr	r1, [r7, #16]
 8005390:	0148      	lsls	r0, r1, #5
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	4401      	add	r1, r0
 8005396:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800539a:	4313      	orrs	r3, r2
 800539c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11e      	bne.n	80053e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e092      	b.n	8005508 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005400:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d07e      	beq.n	8005508 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	6979      	ldr	r1, [r7, #20]
 8005422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005426:	4313      	orrs	r3, r2
 8005428:	634b      	str	r3, [r1, #52]	; 0x34
 800542a:	e06d      	b.n	8005508 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	0cdb      	lsrs	r3, r3, #19
 8005448:	04db      	lsls	r3, r3, #19
 800544a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800546a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800546e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800549e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b6:	6939      	ldr	r1, [r7, #16]
 80054b8:	0148      	lsls	r0, r1, #5
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	4401      	add	r1, r0
 80054be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10d      	bne.n	80054e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	68d9      	ldr	r1, [r3, #12]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	460a      	mov	r2, r1
 80054e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005502:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005516:	b480      	push	{r7}
 8005518:	b089      	sub	sp, #36	; 0x24
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	4611      	mov	r1, r2
 8005522:	461a      	mov	r2, r3
 8005524:	460b      	mov	r3, r1
 8005526:	71fb      	strb	r3, [r7, #7]
 8005528:	4613      	mov	r3, r2
 800552a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d123      	bne.n	8005584 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800553c:	88bb      	ldrh	r3, [r7, #4]
 800553e:	3303      	adds	r3, #3
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e018      	b.n	800557c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	031a      	lsls	r2, r3, #12
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	461a      	mov	r2, r3
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3301      	adds	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3301      	adds	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3301      	adds	r3, #1
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	429a      	cmp	r2, r3
 8005582:	d3e2      	bcc.n	800554a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3724      	adds	r7, #36	; 0x24
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005592:	b480      	push	{r7}
 8005594:	b08b      	sub	sp, #44	; 0x2c
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	4613      	mov	r3, r2
 800559e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	e014      	b.n	80055e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	3301      	adds	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	3301      	adds	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	3301      	adds	r3, #1
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	3301      	adds	r3, #1
 80055e6:	623b      	str	r3, [r7, #32]
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3e6      	bcc.n	80055be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055f0:	8bfb      	ldrh	r3, [r7, #30]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01e      	beq.n	8005634 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	461a      	mov	r2, r3
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	701a      	strb	r2, [r3, #0]
      i++;
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	3301      	adds	r3, #1
 8005620:	623b      	str	r3, [r7, #32]
      pDest++;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	3301      	adds	r3, #1
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005628:	8bfb      	ldrh	r3, [r7, #30]
 800562a:	3b01      	subs	r3, #1
 800562c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800562e:	8bfb      	ldrh	r3, [r7, #30]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ea      	bne.n	800560a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005636:	4618      	mov	r0, r3
 8005638:	372c      	adds	r7, #44	; 0x2c
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d12c      	bne.n	80056b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	db12      	blt.n	8005696 <USB_EPSetStall+0x54>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00f      	beq.n	8005696 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005690:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005694:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e02b      	b.n	8005710 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db12      	blt.n	80056f0 <USB_EPSetStall+0xae>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00f      	beq.n	80056f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800570e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d128      	bne.n	800578c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005758:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	78db      	ldrb	r3, [r3, #3]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d003      	beq.n	800576a <USB_EPClearStall+0x4c>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d138      	bne.n	80057dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e027      	b.n	80057dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	78db      	ldrb	r3, [r3, #3]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d003      	beq.n	80057bc <USB_EPClearStall+0x9e>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	78db      	ldrb	r3, [r3, #3]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d10f      	bne.n	80057dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005808:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800580c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005824:	4313      	orrs	r3, r2
 8005826:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005864:	f023 0302 	bic.w	r3, r3, #2
 8005868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4013      	ands	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	0c1b      	lsrs	r3, r3, #16
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	b29b      	uxth	r3, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005976:	68bb      	ldr	r3, [r7, #8]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	01db      	lsls	r3, r3, #7
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059d2:	68bb      	ldr	r3, [r7, #8]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0301 	and.w	r3, r3, #1
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	333c      	adds	r3, #60	; 0x3c
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4a26      	ldr	r2, [pc, #152]	; (8005afc <USB_EP0_OutStart+0xb8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d90a      	bls.n	8005a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a78:	d101      	bne.n	8005a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e037      	b.n	8005aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aac:	f043 0318 	orr.w	r3, r3, #24
 8005ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10f      	bne.n	8005aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	4f54300a 	.word	0x4f54300a

08005b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <USB_CoreReset+0x60>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e01a      	b.n	8005b52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	daf3      	bge.n	8005b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f043 0201 	orr.w	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <USB_CoreReset+0x60>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e006      	b.n	8005b52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d0f1      	beq.n	8005b34 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	00030d40 	.word	0x00030d40

08005b64 <JoyStick_Init>:
static ADC_HandleTypeDef hadc[JOYSTICK_UNITS] = {0};
static ADC_ChannelConfTypeDef sConfig = {0};
//static uint8_t calibrated = 0;

void JoyStick_Init(uint16_t JoyStick_Instance)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6e:	f107 031c 	add.w	r3, r7, #28
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	611a      	str	r2, [r3, #16]

	if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOA || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOA)
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	494b      	ldr	r1, [pc, #300]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a49      	ldr	r2, [pc, #292]	; (8005cb4 <JoyStick_Init+0x150>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <JoyStick_Init+0x48>
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	4946      	ldr	r1, [pc, #280]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a43      	ldr	r2, [pc, #268]	; (8005cb4 <JoyStick_Init+0x150>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10e      	bne.n	8005bca <JoyStick_Init+0x66>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	4b41      	ldr	r3, [pc, #260]	; (8005cb8 <JoyStick_Init+0x154>)
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	4a40      	ldr	r2, [pc, #256]	; (8005cb8 <JoyStick_Init+0x154>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6313      	str	r3, [r2, #48]	; 0x30
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <JoyStick_Init+0x154>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	e0a3      	b.n	8005d12 <JoyStick_Init+0x1ae>
	}
	else if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOB || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOB)
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	4938      	ldr	r1, [pc, #224]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	440b      	add	r3, r1
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <JoyStick_Init+0x158>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <JoyStick_Init+0x94>
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	4933      	ldr	r1, [pc, #204]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	440b      	add	r3, r1
 8005bee:	3304      	adds	r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a32      	ldr	r2, [pc, #200]	; (8005cbc <JoyStick_Init+0x158>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d10e      	bne.n	8005c16 <JoyStick_Init+0xb2>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <JoyStick_Init+0x154>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	4a2d      	ldr	r2, [pc, #180]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	6313      	str	r3, [r2, #48]	; 0x30
 8005c08:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	e07d      	b.n	8005d12 <JoyStick_Init+0x1ae>
	}
	else if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOC || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOC)
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	4925      	ldr	r1, [pc, #148]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <JoyStick_Init+0x15c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <JoyStick_Init+0xe0>
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	4920      	ldr	r1, [pc, #128]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	440b      	add	r3, r1
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <JoyStick_Init+0x15c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10e      	bne.n	8005c62 <JoyStick_Init+0xfe>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	6313      	str	r3, [r2, #48]	; 0x30
 8005c54:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	e057      	b.n	8005d12 <JoyStick_Init+0x1ae>
	}
	else if (JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOD || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOD)
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	4912      	ldr	r1, [pc, #72]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	440b      	add	r3, r1
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <JoyStick_Init+0x160>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <JoyStick_Init+0x12c>
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	490d      	ldr	r1, [pc, #52]	; (8005cb0 <JoyStick_Init+0x14c>)
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	440b      	add	r3, r1
 8005c86:	3304      	adds	r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0e      	ldr	r2, [pc, #56]	; (8005cc4 <JoyStick_Init+0x160>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d11b      	bne.n	8005cc8 <JoyStick_Init+0x164>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <JoyStick_Init+0x154>)
 8005c9a:	f043 0308 	orr.w	r3, r3, #8
 8005c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <JoyStick_Init+0x154>)
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	e031      	b.n	8005d12 <JoyStick_Init+0x1ae>
 8005cae:	bf00      	nop
 8005cb0:	0800ab74 	.word	0x0800ab74
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40020400 	.word	0x40020400
 8005cc0:	40020800 	.word	0x40020800
 8005cc4:	40020c00 	.word	0x40020c00
	}
	else if (JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOE || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOE)
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	4968      	ldr	r1, [pc, #416]	; (8005e6c <JoyStick_Init+0x308>)
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <JoyStick_Init+0x30c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <JoyStick_Init+0x192>
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	4962      	ldr	r1, [pc, #392]	; (8005e6c <JoyStick_Init+0x308>)
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	3304      	adds	r3, #4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5f      	ldr	r2, [pc, #380]	; (8005e70 <JoyStick_Init+0x30c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10d      	bne.n	8005d12 <JoyStick_Init+0x1ae>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <JoyStick_Init+0x310>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4a5d      	ldr	r2, [pc, #372]	; (8005e74 <JoyStick_Init+0x310>)
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	6313      	str	r3, [r2, #48]	; 0x30
 8005d06:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <JoyStick_Init+0x310>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
	}

	GPIO_InitStruct.Pin = JoyStick_CfgParam[JoyStick_Instance].JoyStick_xPIN;
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	4955      	ldr	r1, [pc, #340]	; (8005e6c <JoyStick_Init+0x308>)
 8005d16:	4613      	mov	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	3308      	adds	r3, #8
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d26:	2303      	movs	r3, #3
 8005d28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO, &GPIO_InitStruct);
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	494f      	ldr	r1, [pc, #316]	; (8005e6c <JoyStick_Init+0x308>)
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	440b      	add	r3, r1
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f107 021c 	add.w	r2, r7, #28
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb fe73 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JoyStick_CfgParam[JoyStick_Instance].JoyStick_yPIN;
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	4948      	ldr	r1, [pc, #288]	; (8005e6c <JoyStick_Init+0x308>)
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	440b      	add	r3, r1
 8005d54:	330a      	adds	r3, #10
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO, &GPIO_InitStruct);
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	4942      	ldr	r1, [pc, #264]	; (8005e6c <JoyStick_Init+0x308>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f107 021c 	add.w	r2, r7, #28
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fb fe58 	bl	8001a2c <HAL_GPIO_Init>

	hadc[JoyStick_Instance].Instance = JoyStick_CfgParam[JoyStick_Instance].ADC_Instance;
 8005d7c:	88f9      	ldrh	r1, [r7, #6]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	483a      	ldr	r0, [pc, #232]	; (8005e6c <JoyStick_Init+0x308>)
 8005d82:	460b      	mov	r3, r1
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	440b      	add	r3, r1
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4403      	add	r3, r0
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	4839      	ldr	r0, [pc, #228]	; (8005e78 <JoyStick_Init+0x314>)
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4403      	add	r3, r0
 8005d9c:	6019      	str	r1, [r3, #0]
	hadc[JoyStick_Instance].Init.ScanConvMode = DISABLE;//ADC_SCAN_DISABLE;
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	4935      	ldr	r1, [pc, #212]	; (8005e78 <JoyStick_Init+0x314>)
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	3310      	adds	r3, #16
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.ContinuousConvMode = DISABLE;
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	4930      	ldr	r1, [pc, #192]	; (8005e78 <JoyStick_Init+0x314>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3318      	adds	r3, #24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.DiscontinuousConvMode = DISABLE;
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	492b      	ldr	r1, [pc, #172]	; (8005e78 <JoyStick_Init+0x314>)
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3320      	adds	r3, #32
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	4926      	ldr	r1, [pc, #152]	; (8005e78 <JoyStick_Init+0x314>)
 8005dde:	4613      	mov	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4413      	add	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	3328      	adds	r3, #40	; 0x28
 8005dea:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <JoyStick_Init+0x318>)
 8005dec:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	4921      	ldr	r1, [pc, #132]	; (8005e78 <JoyStick_Init+0x314>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.NbrOfConversion = 1;
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	491c      	ldr	r1, [pc, #112]	; (8005e78 <JoyStick_Init+0x314>)
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	440b      	add	r3, r1
 8005e10:	331c      	adds	r3, #28
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
	HAL_ADC_Init(&hadc[JoyStick_Instance]);
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <JoyStick_Init+0x314>)
 8005e22:	4413      	add	r3, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fb f953 	bl	80010d0 <HAL_ADC_Init>
    sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCx_CH;
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	490f      	ldr	r1, [pc, #60]	; (8005e6c <JoyStick_Init+0x308>)
 8005e2e:	4613      	mov	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3310      	adds	r3, #16
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <JoyStick_Init+0x31c>)
 8005e3e:	6013      	str	r3, [r2, #0]
	sConfig.Rank = 1;//ADC_REGULAR_RANK_1;
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <JoyStick_Init+0x31c>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;//ADC_SAMPLETIME_28CYCLES_5;
 8005e46:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <JoyStick_Init+0x31c>)
 8005e48:	2207      	movs	r2, #7
 8005e4a:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4413      	add	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <JoyStick_Init+0x314>)
 8005e58:	4413      	add	r3, r2
 8005e5a:	4909      	ldr	r1, [pc, #36]	; (8005e80 <JoyStick_Init+0x31c>)
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fb fae5 	bl	800142c <HAL_ADC_ConfigChannel>
	{
		HAL_ADCEx_Calibration_Start(&hadc[JoyStick_Instance]);
		calibrated = 1;
	}
	*/
}
 8005e62:	bf00      	nop
 8005e64:	3730      	adds	r7, #48	; 0x30
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	0800ab74 	.word	0x0800ab74
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40023800 	.word	0x40023800
 8005e78:	200001d8 	.word	0x200001d8
 8005e7c:	0f000001 	.word	0x0f000001
 8005e80:	20000268 	.word	0x20000268

08005e84 <JoyStick_Read>:


void JoyStick_Read(uint16_t JoyStick_Instance, uint16_t* JoyStick_XY)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	80fb      	strh	r3, [r7, #6]
	uint32_t AD_RES;

	// Select The JoyStick Instance ADC Channel For X
	sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCx_CH;
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	493c      	ldr	r1, [pc, #240]	; (8005f84 <JoyStick_Read+0x100>)
 8005e94:	4613      	mov	r3, r2
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3310      	adds	r3, #16
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a39      	ldr	r2, [pc, #228]	; (8005f88 <JoyStick_Read+0x104>)
 8005ea4:	6013      	str	r3, [r2, #0]
    HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4a36      	ldr	r2, [pc, #216]	; (8005f8c <JoyStick_Read+0x108>)
 8005eb2:	4413      	add	r3, r2
 8005eb4:	4934      	ldr	r1, [pc, #208]	; (8005f88 <JoyStick_Read+0x104>)
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb fab8 	bl	800142c <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc[JoyStick_Instance]);
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <JoyStick_Read+0x108>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fb f944 	bl	8001158 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc[JoyStick_Instance], 1);
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4a2c      	ldr	r2, [pc, #176]	; (8005f8c <JoyStick_Read+0x108>)
 8005edc:	4413      	add	r3, r2
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fb fa0b 	bl	80012fc <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick X
	AD_RES = HAL_ADC_GetValue(&hadc[JoyStick_Instance]);
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <JoyStick_Read+0x108>)
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fb fa8c 	bl	8001412 <HAL_ADC_GetValue>
 8005efa:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[0] = AD_RES;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	801a      	strh	r2, [r3, #0]

	// Select The JoyStick Instance ADC Channel For Y
	sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCy_CH;
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	491f      	ldr	r1, [pc, #124]	; (8005f84 <JoyStick_Read+0x100>)
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	3314      	adds	r3, #20
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <JoyStick_Read+0x104>)
 8005f18:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <JoyStick_Read+0x108>)
 8005f26:	4413      	add	r3, r2
 8005f28:	4917      	ldr	r1, [pc, #92]	; (8005f88 <JoyStick_Read+0x104>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fb fa7e 	bl	800142c <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc[JoyStick_Instance]);
 8005f30:	88fa      	ldrh	r2, [r7, #6]
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <JoyStick_Read+0x108>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb f90a 	bl	8001158 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc[JoyStick_Instance], 1);
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	4613      	mov	r3, r2
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <JoyStick_Read+0x108>)
 8005f50:	4413      	add	r3, r2
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fb f9d1 	bl	80012fc <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick Y
	AD_RES = HAL_ADC_GetValue(&hadc[JoyStick_Instance]);
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <JoyStick_Read+0x108>)
 8005f66:	4413      	add	r3, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fb fa52 	bl	8001412 <HAL_ADC_GetValue>
 8005f6e:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[1] = AD_RES;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	3302      	adds	r3, #2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	b292      	uxth	r2, r2
 8005f78:	801a      	strh	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	0800ab74 	.word	0x0800ab74
 8005f88:	20000268 	.word	0x20000268
 8005f8c:	200001d8 	.word	0x200001d8

08005f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f103 0208 	add.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f103 0208 	add.w	r2, r3, #8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e00c      	b.n	800606c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3308      	adds	r3, #8
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e002      	b.n	8006060 <vListInsert+0x2e>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d2f6      	bcs.n	800605a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6852      	ldr	r2, [r2, #4]
 80060c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d103      	bne.n	80060d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1e5a      	subs	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006122:	f002 fa37 	bl	8008594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	441a      	add	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	3b01      	subs	r3, #1
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	441a      	add	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	22ff      	movs	r2, #255	; 0xff
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d114      	bne.n	80061a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01a      	beq.n	80061b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f001 f9f3 	bl	8007570 <xTaskRemoveFromEventList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d012      	beq.n	80061b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <xQueueGenericReset+0xcc>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	e009      	b.n	80061b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3310      	adds	r3, #16
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fef2 	bl	8005f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3324      	adds	r3, #36	; 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff feed 	bl	8005f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061b6:	f002 fa1d 	bl	80085f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061ba:	2301      	movs	r3, #1
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	613b      	str	r3, [r7, #16]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e004      	b.n	8006208 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	3350      	adds	r3, #80	; 0x50
 800620c:	4618      	mov	r0, r3
 800620e:	f002 fae3 	bl	80087d8 <pvPortMalloc>
 8006212:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	3350      	adds	r3, #80	; 0x50
 8006222:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006224:	79fa      	ldrb	r2, [r7, #7]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f805 	bl	8006240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006236:	69bb      	ldr	r3, [r7, #24]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e002      	b.n	8006262 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800626e:	2101      	movs	r1, #1
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f7ff ff41 	bl	80060f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006296:	2300      	movs	r3, #0
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <xQueueGenericSend+0x32>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <xQueueGenericSend+0x40>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <xQueueGenericSend+0x44>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <xQueueGenericSend+0x46>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <xQueueGenericSend+0x60>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d103      	bne.n	80062f6 <xQueueGenericSend+0x6e>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <xQueueGenericSend+0x72>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericSend+0x74>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueGenericSend+0x8e>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006316:	f001 fac7 	bl	80078a8 <xTaskGetSchedulerState>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <xQueueGenericSend+0x9e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <xQueueGenericSend+0xa2>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <xQueueGenericSend+0xa4>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueGenericSend+0xbe>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61fb      	str	r3, [r7, #28]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006346:	f002 f925 	bl	8008594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <xQueueGenericSend+0xd4>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d129      	bne.n	80063b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006362:	f000 fbb9 	bl	8006ad8 <prvCopyDataToQueue>
 8006366:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	3324      	adds	r3, #36	; 0x24
 8006374:	4618      	mov	r0, r3
 8006376:	f001 f8fb 	bl	8007570 <xTaskRemoveFromEventList>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d013      	beq.n	80063a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006380:	4b3f      	ldr	r3, [pc, #252]	; (8006480 <xQueueGenericSend+0x1f8>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	e00a      	b.n	80063a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006398:	4b39      	ldr	r3, [pc, #228]	; (8006480 <xQueueGenericSend+0x1f8>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063a8:	f002 f924 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e063      	b.n	8006478 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063b6:	f002 f91d 	bl	80085f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e05c      	b.n	8006478 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f933 	bl	8007634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063d2:	f002 f90f 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063d6:	f000 fead 	bl	8007134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063da:	f002 f8db 	bl	8008594 <vPortEnterCritical>
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d103      	bne.n	80063f4 <xQueueGenericSend+0x16c>
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d103      	bne.n	800640a <xQueueGenericSend+0x182>
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640a:	f002 f8f3 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800640e:	1d3a      	adds	r2, r7, #4
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f001 f922 	bl	8007660 <xTaskCheckForTimeOut>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d124      	bne.n	800646c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006424:	f000 fc50 	bl	8006cc8 <prvIsQueueFull>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d018      	beq.n	8006460 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	3310      	adds	r3, #16
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f84a 	bl	80074d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643e:	f000 fbdb 	bl	8006bf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006442:	f000 fe85 	bl	8007150 <xTaskResumeAll>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f af7c 	bne.w	8006346 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <xQueueGenericSend+0x1f8>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	e772      	b.n	8006346 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f000 fbc9 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006466:	f000 fe73 	bl	8007150 <xTaskResumeAll>
 800646a:	e76c      	b.n	8006346 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800646c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800646e:	f000 fbc3 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006472:	f000 fe6d 	bl	8007150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006476:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006478:	4618      	mov	r0, r3
 800647a:	3738      	adds	r7, #56	; 0x38
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	e000ed04 	.word	0xe000ed04

08006484 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08e      	sub	sp, #56	; 0x38
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <xQueueGenericSendFromISR+0x3c>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <xQueueGenericSendFromISR+0x40>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <xQueueGenericSendFromISR+0x42>
 80064c4:	2300      	movs	r3, #0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	623b      	str	r3, [r7, #32]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d103      	bne.n	80064ee <xQueueGenericSendFromISR+0x6a>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <xQueueGenericSendFromISR+0x6e>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <xQueueGenericSendFromISR+0x70>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	61fb      	str	r3, [r7, #28]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800650e:	f002 f923 	bl	8008758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006512:	f3ef 8211 	mrs	r2, BASEPRI
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61ba      	str	r2, [r7, #24]
 8006528:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800652a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <xQueueGenericSendFromISR+0xbc>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d12c      	bne.n	800659a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006550:	f000 fac2 	bl	8006ad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006554:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d112      	bne.n	8006584 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f800 	bl	8007570 <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e007      	b.n	8006594 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006588:	3301      	adds	r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b25a      	sxtb	r2, r3
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006594:	2301      	movs	r3, #1
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006598:	e001      	b.n	800659e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800659a:	2300      	movs	r3, #0
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3738      	adds	r7, #56	; 0x38
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08e      	sub	sp, #56	; 0x38
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xQueueGiveFromISR+0x2a>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <xQueueGiveFromISR+0x48>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61fb      	str	r3, [r7, #28]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <xQueueGiveFromISR+0x58>
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <xQueueGiveFromISR+0x5c>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <xQueueGiveFromISR+0x5e>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <xQueueGiveFromISR+0x78>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	61bb      	str	r3, [r7, #24]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800662c:	f002 f894 	bl	8008758 <vPortValidateInterruptPriority>
	__asm volatile
 8006630:	f3ef 8211 	mrs	r2, BASEPRI
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	617a      	str	r2, [r7, #20]
 8006646:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006648:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006658:	429a      	cmp	r2, r3
 800665a:	d22b      	bcs.n	80066b4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800666e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d112      	bne.n	800669e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d016      	beq.n	80066ae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f000 ff73 	bl	8007570 <xTaskRemoveFromEventList>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e007      	b.n	80066ae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800669e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066a2:	3301      	adds	r3, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	b25a      	sxtb	r2, r3
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066ae:	2301      	movs	r3, #1
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	e001      	b.n	80066b8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f383 8811 	msr	BASEPRI, r3
}
 80066c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3738      	adds	r7, #56	; 0x38
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <xQueueReceive+0x30>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	623b      	str	r3, [r7, #32]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <xQueueReceive+0x3e>
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <xQueueReceive+0x42>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <xQueueReceive+0x44>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xQueueReceive+0x5e>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	61fb      	str	r3, [r7, #28]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800672e:	f001 f8bb 	bl	80078a8 <xTaskGetSchedulerState>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <xQueueReceive+0x6e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <xQueueReceive+0x72>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueReceive+0x74>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueReceive+0x8e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61bb      	str	r3, [r7, #24]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800675e:	f001 ff19 	bl	8008594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01f      	beq.n	80067ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006772:	f000 fa1b 	bl	8006bac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00f      	beq.n	80067a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	3310      	adds	r3, #16
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fef0 	bl	8007570 <xTaskRemoveFromEventList>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006796:	4b3d      	ldr	r3, [pc, #244]	; (800688c <xQueueReceive+0x1bc>)
 8006798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067a6:	f001 ff25 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e069      	b.n	8006882 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067b4:	f001 ff1e 	bl	80085f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e062      	b.n	8006882 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c2:	f107 0310 	add.w	r3, r7, #16
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ff34 	bl	8007634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d0:	f001 ff10 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067d4:	f000 fcae 	bl	8007134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067d8:	f001 fedc 	bl	8008594 <vPortEnterCritical>
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e2:	b25b      	sxtb	r3, r3
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d103      	bne.n	80067f2 <xQueueReceive+0x122>
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d103      	bne.n	8006808 <xQueueReceive+0x138>
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006808:	f001 fef4 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800680c:	1d3a      	adds	r2, r7, #4
 800680e:	f107 0310 	add.w	r3, r7, #16
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 ff23 	bl	8007660 <xTaskCheckForTimeOut>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d123      	bne.n	8006868 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006822:	f000 fa3b 	bl	8006c9c <prvIsQueueEmpty>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d017      	beq.n	800685c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	3324      	adds	r3, #36	; 0x24
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4611      	mov	r1, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fe4b 	bl	80074d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800683a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683c:	f000 f9dc 	bl	8006bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006840:	f000 fc86 	bl	8007150 <xTaskResumeAll>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d189      	bne.n	800675e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <xQueueReceive+0x1bc>)
 800684c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	e780      	b.n	800675e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800685c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685e:	f000 f9cb 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006862:	f000 fc75 	bl	8007150 <xTaskResumeAll>
 8006866:	e77a      	b.n	800675e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686a:	f000 f9c5 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800686e:	f000 fc6f 	bl	8007150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006874:	f000 fa12 	bl	8006c9c <prvIsQueueEmpty>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f43f af6f 	beq.w	800675e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006882:	4618      	mov	r0, r3
 8006884:	3730      	adds	r7, #48	; 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	; 0x38
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	623b      	str	r3, [r7, #32]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	61fb      	str	r3, [r7, #28]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068e0:	f000 ffe2 	bl	80078a8 <xTaskGetSchedulerState>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <xQueueSemaphoreTake+0x60>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <xQueueSemaphoreTake+0x64>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <xQueueSemaphoreTake+0x66>
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	61bb      	str	r3, [r7, #24]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006910:	f001 fe40 	bl	8008594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d024      	beq.n	800696a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	1e5a      	subs	r2, r3, #1
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006930:	f001 f978 	bl	8007c24 <pvTaskIncrementMutexHeldCount>
 8006934:	4602      	mov	r2, r0
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00f      	beq.n	8006962 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	3310      	adds	r3, #16
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fe12 	bl	8007570 <xTaskRemoveFromEventList>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006952:	4b54      	ldr	r3, [pc, #336]	; (8006aa4 <xQueueSemaphoreTake+0x214>)
 8006954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006962:	f001 fe47 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 8006966:	2301      	movs	r3, #1
 8006968:	e097      	b.n	8006a9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d111      	bne.n	8006994 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	617b      	str	r3, [r7, #20]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800698c:	f001 fe32 	bl	80085f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006990:	2300      	movs	r3, #0
 8006992:	e082      	b.n	8006a9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800699a:	f107 030c 	add.w	r3, r7, #12
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe48 	bl	8007634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069a8:	f001 fe24 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069ac:	f000 fbc2 	bl	8007134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069b0:	f001 fdf0 	bl	8008594 <vPortEnterCritical>
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d103      	bne.n	80069ca <xQueueSemaphoreTake+0x13a>
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d103      	bne.n	80069e0 <xQueueSemaphoreTake+0x150>
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e0:	f001 fe08 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069e4:	463a      	mov	r2, r7
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fe37 	bl	8007660 <xTaskCheckForTimeOut>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d132      	bne.n	8006a5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069fa:	f000 f94f 	bl	8006c9c <prvIsQueueEmpty>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d026      	beq.n	8006a52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006a0c:	f001 fdc2 	bl	8008594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 ff65 	bl	80078e4 <xTaskPriorityInherit>
 8006a1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a1c:	f001 fdea 	bl	80085f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	3324      	adds	r3, #36	; 0x24
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 fd51 	bl	80074d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a30:	f000 f8e2 	bl	8006bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a34:	f000 fb8c 	bl	8007150 <xTaskResumeAll>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f47f af68 	bne.w	8006910 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <xQueueSemaphoreTake+0x214>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	e75e      	b.n	8006910 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a54:	f000 f8d0 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a58:	f000 fb7a 	bl	8007150 <xTaskResumeAll>
 8006a5c:	e758      	b.n	8006910 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a60:	f000 f8ca 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a64:	f000 fb74 	bl	8007150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a6a:	f000 f917 	bl	8006c9c <prvIsQueueEmpty>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f43f af4d 	beq.w	8006910 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00d      	beq.n	8006a98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a7c:	f001 fd8a 	bl	8008594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a82:	f000 f811 	bl	8006aa8 <prvGetDisinheritPriorityAfterTimeout>
 8006a86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f82e 	bl	8007af0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a94:	f001 fdae 	bl	80085f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3738      	adds	r7, #56	; 0x38
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f1c3 0305 	rsb	r3, r3, #5
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e001      	b.n	8006aca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aca:	68fb      	ldr	r3, [r7, #12]
	}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10d      	bne.n	8006b12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d14d      	bne.n	8006b9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 ff6e 	bl	80079e4 <xTaskPriorityDisinherit>
 8006b08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	e043      	b.n	8006b9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d119      	bne.n	8006b4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6858      	ldr	r0, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	461a      	mov	r2, r3
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	f003 ffbe 	bl	800aaa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	441a      	add	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d32b      	bcc.n	8006b9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	e026      	b.n	8006b9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68d8      	ldr	r0, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	461a      	mov	r2, r3
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	f003 ffa4 	bl	800aaa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	425b      	negs	r3, r3
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d207      	bcs.n	8006b88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	425b      	negs	r3, r3
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d105      	bne.n	8006b9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	441a      	add	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d303      	bcc.n	8006be0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68d9      	ldr	r1, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	461a      	mov	r2, r3
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f003 ff5a 	bl	800aaa4 <memcpy>
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c00:	f001 fcc8 	bl	8008594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c0c:	e011      	b.n	8006c32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fca8 	bl	8007570 <xTaskRemoveFromEventList>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c26:	f000 fd7d 	bl	8007724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dce9      	bgt.n	8006c0e <prvUnlockQueue+0x16>
 8006c3a:	e000      	b.n	8006c3e <prvUnlockQueue+0x46>
					break;
 8006c3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c46:	f001 fcd5 	bl	80085f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c4a:	f001 fca3 	bl	8008594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c56:	e011      	b.n	8006c7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d012      	beq.n	8006c86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3310      	adds	r3, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fc83 	bl	8007570 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c70:	f000 fd58 	bl	8007724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dce9      	bgt.n	8006c58 <prvUnlockQueue+0x60>
 8006c84:	e000      	b.n	8006c88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c90:	f001 fcb0 	bl	80085f4 <vPortExitCritical>
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ca4:	f001 fc76 	bl	8008594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e001      	b.n	8006cba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 fc9b 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cd0:	f001 fc60 	bl	8008594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d102      	bne.n	8006ce6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e001      	b.n	8006cea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cea:	f001 fc83 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e014      	b.n	8006d32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d08:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d14:	490c      	ldr	r1, [pc, #48]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d2a:	e006      	b.n	8006d3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b07      	cmp	r3, #7
 8006d36:	d9e7      	bls.n	8006d08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20013128 	.word	0x20013128

08006d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d5c:	f001 fc1a 	bl	8008594 <vPortEnterCritical>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <vQueueWaitForMessageRestricted+0x2a>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d103      	bne.n	8006d8c <vQueueWaitForMessageRestricted+0x40>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8c:	f001 fc32 	bl	80085f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fbb9 	bl	8007518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006da6:	6978      	ldr	r0, [r7, #20]
 8006da8:	f7ff ff26 	bl	8006bf8 <prvUnlockQueue>
	}
 8006dac:	bf00      	nop
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af04      	add	r7, sp, #16
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 fd05 	bl	80087d8 <pvPortMalloc>
 8006dce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dd6:	2058      	movs	r0, #88	; 0x58
 8006dd8:	f001 fcfe 	bl	80087d8 <pvPortMalloc>
 8006ddc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
 8006dea:	e005      	b.n	8006df8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dec:	6978      	ldr	r0, [r7, #20]
 8006dee:	f001 fdb7 	bl	8008960 <vPortFree>
 8006df2:	e001      	b.n	8006df8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	2300      	movs	r3, #0
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	9302      	str	r3, [sp, #8]
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f80e 	bl	8006e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e1a:	69f8      	ldr	r0, [r7, #28]
 8006e1c:	f000 f89a 	bl	8006f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e20:	2301      	movs	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e002      	b.n	8006e2c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b088      	sub	sp, #32
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	21a5      	movs	r1, #165	; 0xa5
 8006e50:	f003 fe36 	bl	800aac0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	f023 0307 	bic.w	r3, r3, #7
 8006e6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	617b      	str	r3, [r7, #20]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01f      	beq.n	8006ed4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e012      	b.n	8006ec0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3334      	adds	r3, #52	; 0x34
 8006eaa:	460a      	mov	r2, r1
 8006eac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d006      	beq.n	8006ec8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d9e9      	bls.n	8006e9a <prvInitialiseNewTask+0x64>
 8006ec6:	e000      	b.n	8006eca <prvInitialiseNewTask+0x94>
			{
				break;
 8006ec8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ed2:	e003      	b.n	8006edc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d901      	bls.n	8006ee6 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff f867 	bl	8005fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	3318      	adds	r3, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff f862 	bl	8005fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	f1c3 0205 	rsb	r2, r3, #5
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	2200      	movs	r2, #0
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	69b8      	ldr	r0, [r7, #24]
 8006f36:	f001 fa01 	bl	800833c <pxPortInitialiseStack>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4c:	bf00      	nop
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f5c:	f001 fb1a 	bl	8008594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <prvAddNewTaskToReadyList+0xc0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <prvAddNewTaskToReadyList+0xc0>)
 8006f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f6a:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <prvAddNewTaskToReadyList+0xc4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f72:	4a29      	ldr	r2, [pc, #164]	; (8007018 <prvAddNewTaskToReadyList+0xc4>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <prvAddNewTaskToReadyList+0xc0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d110      	bne.n	8006fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f80:	f000 fbf4 	bl	800776c <prvInitialiseTaskLists>
 8006f84:	e00d      	b.n	8006fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f86:	4b25      	ldr	r3, [pc, #148]	; (800701c <prvAddNewTaskToReadyList+0xc8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <prvAddNewTaskToReadyList+0xc4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d802      	bhi.n	8006fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f9c:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fa2:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <prvAddNewTaskToReadyList+0xcc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <prvAddNewTaskToReadyList+0xcc>)
 8006faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fac:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <prvAddNewTaskToReadyList+0xcc>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	2201      	movs	r2, #1
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <prvAddNewTaskToReadyList+0xd0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	4a18      	ldr	r2, [pc, #96]	; (8007024 <prvAddNewTaskToReadyList+0xd0>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <prvAddNewTaskToReadyList+0xd4>)
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7ff f804 	bl	8005fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fe2:	f001 fb07 	bl	80085f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <prvAddNewTaskToReadyList+0xc8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <prvAddNewTaskToReadyList+0xc4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d207      	bcs.n	800700c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	; (800702c <prvAddNewTaskToReadyList+0xd8>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000350 	.word	0x20000350
 8007018:	20000278 	.word	0x20000278
 800701c:	2000035c 	.word	0x2000035c
 8007020:	2000036c 	.word	0x2000036c
 8007024:	20000358 	.word	0x20000358
 8007028:	2000027c 	.word	0x2000027c
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d017      	beq.n	8007072 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007042:	4b13      	ldr	r3, [pc, #76]	; (8007090 <vTaskDelay+0x60>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <vTaskDelay+0x30>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007060:	f000 f868 	bl	8007134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007064:	2100      	movs	r1, #0
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fdf0 	bl	8007c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800706c:	f000 f870 	bl	8007150 <xTaskResumeAll>
 8007070:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d107      	bne.n	8007088 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <vTaskDelay+0x64>)
 800707a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000378 	.word	0x20000378
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800709e:	4b1f      	ldr	r3, [pc, #124]	; (800711c <vTaskStartScheduler+0x84>)
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	2282      	movs	r2, #130	; 0x82
 80070aa:	491d      	ldr	r1, [pc, #116]	; (8007120 <vTaskStartScheduler+0x88>)
 80070ac:	481d      	ldr	r0, [pc, #116]	; (8007124 <vTaskStartScheduler+0x8c>)
 80070ae:	f7ff fe81 	bl	8006db4 <xTaskCreate>
 80070b2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d102      	bne.n	80070c0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80070ba:	f000 fe2d 	bl	8007d18 <xTimerCreateTimerTask>
 80070be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d116      	bne.n	80070f4 <vTaskStartScheduler+0x5c>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60bb      	str	r3, [r7, #8]
}
 80070d8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <vTaskStartScheduler+0x90>)
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <vTaskStartScheduler+0x94>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070e8:	4b11      	ldr	r3, [pc, #68]	; (8007130 <vTaskStartScheduler+0x98>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070ee:	f001 f9af 	bl	8008450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070f2:	e00e      	b.n	8007112 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d10a      	bne.n	8007112 <vTaskStartScheduler+0x7a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	607b      	str	r3, [r7, #4]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <vTaskStartScheduler+0x78>
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000374 	.word	0x20000374
 8007120:	0800ab04 	.word	0x0800ab04
 8007124:	0800773d 	.word	0x0800773d
 8007128:	20000370 	.word	0x20000370
 800712c:	2000035c 	.word	0x2000035c
 8007130:	20000354 	.word	0x20000354

08007134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007138:	4b04      	ldr	r3, [pc, #16]	; (800714c <vTaskSuspendAll+0x18>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	4a03      	ldr	r2, [pc, #12]	; (800714c <vTaskSuspendAll+0x18>)
 8007140:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20000378 	.word	0x20000378

08007150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800715e:	4b41      	ldr	r3, [pc, #260]	; (8007264 <xTaskResumeAll+0x114>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <xTaskResumeAll+0x2c>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	603b      	str	r3, [r7, #0]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800717c:	f001 fa0a 	bl	8008594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007180:	4b38      	ldr	r3, [pc, #224]	; (8007264 <xTaskResumeAll+0x114>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3b01      	subs	r3, #1
 8007186:	4a37      	ldr	r2, [pc, #220]	; (8007264 <xTaskResumeAll+0x114>)
 8007188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800718a:	4b36      	ldr	r3, [pc, #216]	; (8007264 <xTaskResumeAll+0x114>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d161      	bne.n	8007256 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007192:	4b35      	ldr	r3, [pc, #212]	; (8007268 <xTaskResumeAll+0x118>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d05d      	beq.n	8007256 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800719a:	e02e      	b.n	80071fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719c:	4b33      	ldr	r3, [pc, #204]	; (800726c <xTaskResumeAll+0x11c>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3318      	adds	r3, #24
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe ff7b 	bl	80060a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe ff76 	bl	80060a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	2201      	movs	r2, #1
 80071be:	409a      	lsls	r2, r3
 80071c0:	4b2b      	ldr	r3, [pc, #172]	; (8007270 <xTaskResumeAll+0x120>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <xTaskResumeAll+0x120>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4a27      	ldr	r2, [pc, #156]	; (8007274 <xTaskResumeAll+0x124>)
 80071d8:	441a      	add	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe ff02 	bl	8005fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ea:	4b23      	ldr	r3, [pc, #140]	; (8007278 <xTaskResumeAll+0x128>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071f4:	4b21      	ldr	r3, [pc, #132]	; (800727c <xTaskResumeAll+0x12c>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071fa:	4b1c      	ldr	r3, [pc, #112]	; (800726c <xTaskResumeAll+0x11c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1cc      	bne.n	800719c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007208:	f000 fb2e 	bl	8007868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800720c:	4b1c      	ldr	r3, [pc, #112]	; (8007280 <xTaskResumeAll+0x130>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d010      	beq.n	800723a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007218:	f000 f846 	bl	80072a8 <xTaskIncrementTick>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007222:	4b16      	ldr	r3, [pc, #88]	; (800727c <xTaskResumeAll+0x12c>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3b01      	subs	r3, #1
 800722c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f1      	bne.n	8007218 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <xTaskResumeAll+0x130>)
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <xTaskResumeAll+0x12c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xTaskResumeAll+0x134>)
 8007248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007256:	f001 f9cd 	bl	80085f4 <vPortExitCritical>

	return xAlreadyYielded;
 800725a:	68bb      	ldr	r3, [r7, #8]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000378 	.word	0x20000378
 8007268:	20000350 	.word	0x20000350
 800726c:	20000310 	.word	0x20000310
 8007270:	20000358 	.word	0x20000358
 8007274:	2000027c 	.word	0x2000027c
 8007278:	20000278 	.word	0x20000278
 800727c:	20000364 	.word	0x20000364
 8007280:	20000360 	.word	0x20000360
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <xTaskGetTickCount+0x1c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007294:	687b      	ldr	r3, [r7, #4]
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000354 	.word	0x20000354

080072a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b2:	4b4e      	ldr	r3, [pc, #312]	; (80073ec <xTaskIncrementTick+0x144>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8088 	bne.w	80073cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072bc:	4b4c      	ldr	r3, [pc, #304]	; (80073f0 <xTaskIncrementTick+0x148>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072c4:	4a4a      	ldr	r2, [pc, #296]	; (80073f0 <xTaskIncrementTick+0x148>)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d120      	bne.n	8007312 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072d0:	4b48      	ldr	r3, [pc, #288]	; (80073f4 <xTaskIncrementTick+0x14c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	603b      	str	r3, [r7, #0]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xTaskIncrementTick+0x46>
 80072f0:	4b40      	ldr	r3, [pc, #256]	; (80073f4 <xTaskIncrementTick+0x14c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b40      	ldr	r3, [pc, #256]	; (80073f8 <xTaskIncrementTick+0x150>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3e      	ldr	r2, [pc, #248]	; (80073f4 <xTaskIncrementTick+0x14c>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	4a3e      	ldr	r2, [pc, #248]	; (80073f8 <xTaskIncrementTick+0x150>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <xTaskIncrementTick+0x154>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <xTaskIncrementTick+0x154>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	f000 faab 	bl	8007868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007312:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <xTaskIncrementTick+0x158>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d348      	bcc.n	80073ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731c:	4b35      	ldr	r3, [pc, #212]	; (80073f4 <xTaskIncrementTick+0x14c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007326:	4b36      	ldr	r3, [pc, #216]	; (8007400 <xTaskIncrementTick+0x158>)
 8007328:	f04f 32ff 	mov.w	r2, #4294967295
 800732c:	601a      	str	r2, [r3, #0]
					break;
 800732e:	e03e      	b.n	80073ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007330:	4b30      	ldr	r3, [pc, #192]	; (80073f4 <xTaskIncrementTick+0x14c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d203      	bcs.n	8007350 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007348:	4a2d      	ldr	r2, [pc, #180]	; (8007400 <xTaskIncrementTick+0x158>)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800734e:	e02e      	b.n	80073ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fea5 	bl	80060a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	3318      	adds	r3, #24
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fe9c 	bl	80060a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	4b23      	ldr	r3, [pc, #140]	; (8007404 <xTaskIncrementTick+0x15c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4313      	orrs	r3, r2
 800737a:	4a22      	ldr	r2, [pc, #136]	; (8007404 <xTaskIncrementTick+0x15c>)
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <xTaskIncrementTick+0x160>)
 800738c:	441a      	add	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f7fe fe28 	bl	8005fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739e:	4b1b      	ldr	r3, [pc, #108]	; (800740c <xTaskIncrementTick+0x164>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d3b9      	bcc.n	800731c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ac:	e7b6      	b.n	800731c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <xTaskIncrementTick+0x164>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4914      	ldr	r1, [pc, #80]	; (8007408 <xTaskIncrementTick+0x160>)
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d907      	bls.n	80073d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e004      	b.n	80073d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <xTaskIncrementTick+0x168>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3301      	adds	r3, #1
 80073d2:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <xTaskIncrementTick+0x168>)
 80073d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073d6:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <xTaskIncrementTick+0x16c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80073de:	2301      	movs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000378 	.word	0x20000378
 80073f0:	20000354 	.word	0x20000354
 80073f4:	20000308 	.word	0x20000308
 80073f8:	2000030c 	.word	0x2000030c
 80073fc:	20000368 	.word	0x20000368
 8007400:	20000370 	.word	0x20000370
 8007404:	20000358 	.word	0x20000358
 8007408:	2000027c 	.word	0x2000027c
 800740c:	20000278 	.word	0x20000278
 8007410:	20000360 	.word	0x20000360
 8007414:	20000364 	.word	0x20000364

08007418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800741e:	4b27      	ldr	r3, [pc, #156]	; (80074bc <vTaskSwitchContext+0xa4>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007426:	4b26      	ldr	r3, [pc, #152]	; (80074c0 <vTaskSwitchContext+0xa8>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800742c:	e03f      	b.n	80074ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800742e:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <vTaskSwitchContext+0xa8>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <vTaskSwitchContext+0xac>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	fab3 f383 	clz	r3, r3
 8007440:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	f1c3 031f 	rsb	r3, r3, #31
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	491f      	ldr	r1, [pc, #124]	; (80074c8 <vTaskSwitchContext+0xb0>)
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <vTaskSwitchContext+0x5c>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <vTaskSwitchContext+0x5a>
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <vTaskSwitchContext+0xb0>)
 8007480:	4413      	add	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3308      	adds	r3, #8
 8007496:	429a      	cmp	r2, r3
 8007498:	d104      	bne.n	80074a4 <vTaskSwitchContext+0x8c>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	605a      	str	r2, [r3, #4]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	4a08      	ldr	r2, [pc, #32]	; (80074cc <vTaskSwitchContext+0xb4>)
 80074ac:	6013      	str	r3, [r2, #0]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000378 	.word	0x20000378
 80074c0:	20000364 	.word	0x20000364
 80074c4:	20000358 	.word	0x20000358
 80074c8:	2000027c 	.word	0x2000027c
 80074cc:	20000278 	.word	0x20000278

080074d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <vTaskPlaceOnEventList+0x44>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3318      	adds	r3, #24
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fe fd97 	bl	8006032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007504:	2101      	movs	r1, #1
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	f000 fba0 	bl	8007c4c <prvAddCurrentTaskToDelayedList>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000278 	.word	0x20000278

08007518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	617b      	str	r3, [r7, #20]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <vTaskPlaceOnEventListRestricted+0x54>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3318      	adds	r3, #24
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7fe fd4e 	bl	8005fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295
 8007558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f000 fb75 	bl	8007c4c <prvAddCurrentTaskToDelayedList>
	}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000278 	.word	0x20000278

08007570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60fb      	str	r3, [r7, #12]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3318      	adds	r3, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fd7f 	bl	80060a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a6:	4b1d      	ldr	r3, [pc, #116]	; (800761c <xTaskRemoveFromEventList+0xac>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11c      	bne.n	80075e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fd76 	bl	80060a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	2201      	movs	r2, #1
 80075be:	409a      	lsls	r2, r3
 80075c0:	4b17      	ldr	r3, [pc, #92]	; (8007620 <xTaskRemoveFromEventList+0xb0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	4a16      	ldr	r2, [pc, #88]	; (8007620 <xTaskRemoveFromEventList+0xb0>)
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a13      	ldr	r2, [pc, #76]	; (8007624 <xTaskRemoveFromEventList+0xb4>)
 80075d8:	441a      	add	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe fd02 	bl	8005fea <vListInsertEnd>
 80075e6:	e005      	b.n	80075f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3318      	adds	r3, #24
 80075ec:	4619      	mov	r1, r3
 80075ee:	480e      	ldr	r0, [pc, #56]	; (8007628 <xTaskRemoveFromEventList+0xb8>)
 80075f0:	f7fe fcfb 	bl	8005fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <xTaskRemoveFromEventList+0xbc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d905      	bls.n	800760e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007606:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <xTaskRemoveFromEventList+0xc0>)
 8007608:	2201      	movs	r2, #1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e001      	b.n	8007612 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007612:	697b      	ldr	r3, [r7, #20]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20000378 	.word	0x20000378
 8007620:	20000358 	.word	0x20000358
 8007624:	2000027c 	.word	0x2000027c
 8007628:	20000310 	.word	0x20000310
 800762c:	20000278 	.word	0x20000278
 8007630:	20000364 	.word	0x20000364

08007634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <vTaskInternalSetTimeOutState+0x24>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <vTaskInternalSetTimeOutState+0x28>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	20000368 	.word	0x20000368
 800765c:	20000354 	.word	0x20000354

08007660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	613b      	str	r3, [r7, #16]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	60fb      	str	r3, [r7, #12]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076a2:	f000 ff77 	bl	8008594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076a6:	4b1d      	ldr	r3, [pc, #116]	; (800771c <xTaskCheckForTimeOut+0xbc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d102      	bne.n	80076c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e023      	b.n	800770e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <xTaskCheckForTimeOut+0xc0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d007      	beq.n	80076e2 <xTaskCheckForTimeOut+0x82>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e015      	b.n	800770e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d20b      	bcs.n	8007704 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff9b 	bl	8007634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e004      	b.n	800770e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800770e:	f000 ff71 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8007712:	69fb      	ldr	r3, [r7, #28]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000354 	.word	0x20000354
 8007720:	20000368 	.word	0x20000368

08007724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <vTaskMissedYield+0x14>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20000364 	.word	0x20000364

0800773c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007744:	f000 f852 	bl	80077ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvIdleTask+0x28>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d9f9      	bls.n	8007744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <prvIdleTask+0x2c>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007760:	e7f0      	b.n	8007744 <prvIdleTask+0x8>
 8007762:	bf00      	nop
 8007764:	2000027c 	.word	0x2000027c
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	e00c      	b.n	8007792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a12      	ldr	r2, [pc, #72]	; (80077cc <prvInitialiseTaskLists+0x60>)
 8007784:	4413      	add	r3, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fc02 	bl	8005f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3301      	adds	r3, #1
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d9ef      	bls.n	8007778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007798:	480d      	ldr	r0, [pc, #52]	; (80077d0 <prvInitialiseTaskLists+0x64>)
 800779a:	f7fe fbf9 	bl	8005f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800779e:	480d      	ldr	r0, [pc, #52]	; (80077d4 <prvInitialiseTaskLists+0x68>)
 80077a0:	f7fe fbf6 	bl	8005f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077a4:	480c      	ldr	r0, [pc, #48]	; (80077d8 <prvInitialiseTaskLists+0x6c>)
 80077a6:	f7fe fbf3 	bl	8005f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077aa:	480c      	ldr	r0, [pc, #48]	; (80077dc <prvInitialiseTaskLists+0x70>)
 80077ac:	f7fe fbf0 	bl	8005f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077b0:	480b      	ldr	r0, [pc, #44]	; (80077e0 <prvInitialiseTaskLists+0x74>)
 80077b2:	f7fe fbed 	bl	8005f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <prvInitialiseTaskLists+0x78>)
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <prvInitialiseTaskLists+0x64>)
 80077ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <prvInitialiseTaskLists+0x7c>)
 80077be:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <prvInitialiseTaskLists+0x68>)
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	2000027c 	.word	0x2000027c
 80077d0:	200002e0 	.word	0x200002e0
 80077d4:	200002f4 	.word	0x200002f4
 80077d8:	20000310 	.word	0x20000310
 80077dc:	20000324 	.word	0x20000324
 80077e0:	2000033c 	.word	0x2000033c
 80077e4:	20000308 	.word	0x20000308
 80077e8:	2000030c 	.word	0x2000030c

080077ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f2:	e019      	b.n	8007828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077f4:	f000 fece 	bl	8008594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <prvCheckTasksWaitingTermination+0x50>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fc4d 	bl	80060a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <prvCheckTasksWaitingTermination+0x54>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3b01      	subs	r3, #1
 8007810:	4a0b      	ldr	r2, [pc, #44]	; (8007840 <prvCheckTasksWaitingTermination+0x54>)
 8007812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800781c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800781e:	f000 fee9 	bl	80085f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f810 	bl	8007848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e1      	bne.n	80077f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000324 	.word	0x20000324
 8007840:	20000350 	.word	0x20000350
 8007844:	20000338 	.word	0x20000338

08007848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f883 	bl	8008960 <vPortFree>
			vPortFree( pxTCB );
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f880 	bl	8008960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007880:	e008      	b.n	8007894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a04      	ldr	r2, [pc, #16]	; (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007892:	6013      	str	r3, [r2, #0]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000308 	.word	0x20000308
 80078a4:	20000370 	.word	0x20000370

080078a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <xTaskGetSchedulerState+0x34>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078b6:	2301      	movs	r3, #1
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	e008      	b.n	80078ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078bc:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <xTaskGetSchedulerState+0x38>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c4:	2302      	movs	r3, #2
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e001      	b.n	80078ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ca:	2300      	movs	r3, #0
 80078cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ce:	687b      	ldr	r3, [r7, #4]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	2000035c 	.word	0x2000035c
 80078e0:	20000378 	.word	0x20000378

080078e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d069      	beq.n	80079ce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <xTaskPriorityInherit+0xf4>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	429a      	cmp	r2, r3
 8007906:	d259      	bcs.n	80079bc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	db06      	blt.n	800791e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007910:	4b31      	ldr	r3, [pc, #196]	; (80079d8 <xTaskPriorityInherit+0xf4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	f1c3 0205 	rsb	r2, r3, #5
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6959      	ldr	r1, [r3, #20]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4a2b      	ldr	r2, [pc, #172]	; (80079dc <xTaskPriorityInherit+0xf8>)
 8007930:	4413      	add	r3, r2
 8007932:	4299      	cmp	r1, r3
 8007934:	d13a      	bne.n	80079ac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	3304      	adds	r3, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fbb2 	bl	80060a4 <uxListRemove>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d115      	bne.n	8007972 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4924      	ldr	r1, [pc, #144]	; (80079dc <xTaskPriorityInherit+0xf8>)
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <xTaskPriorityInherit+0x8e>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	2201      	movs	r2, #1
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43da      	mvns	r2, r3
 8007968:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <xTaskPriorityInherit+0xfc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4013      	ands	r3, r2
 800796e:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <xTaskPriorityInherit+0xfc>)
 8007970:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <xTaskPriorityInherit+0xf4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <xTaskPriorityInherit+0xfc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4313      	orrs	r3, r2
 800798a:	4a15      	ldr	r2, [pc, #84]	; (80079e0 <xTaskPriorityInherit+0xfc>)
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a10      	ldr	r2, [pc, #64]	; (80079dc <xTaskPriorityInherit+0xf8>)
 800799c:	441a      	add	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fe fb20 	bl	8005fea <vListInsertEnd>
 80079aa:	e004      	b.n	80079b6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <xTaskPriorityInherit+0xf4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e008      	b.n	80079ce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <xTaskPriorityInherit+0xf4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d201      	bcs.n	80079ce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ce:	68fb      	ldr	r3, [r7, #12]
	}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20000278 	.word	0x20000278
 80079dc:	2000027c 	.word	0x2000027c
 80079e0:	20000358 	.word	0x20000358

080079e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d06e      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079fa:	4b3a      	ldr	r3, [pc, #232]	; (8007ae4 <xTaskPriorityDisinherit+0x100>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d00a      	beq.n	8007a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d044      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d140      	bne.n	8007ad8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fb22 	bl	80060a4 <uxListRemove>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d115      	bne.n	8007a92 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6a:	491f      	ldr	r1, [pc, #124]	; (8007ae8 <xTaskPriorityDisinherit+0x104>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xTaskPriorityDisinherit+0xae>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	2201      	movs	r2, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43da      	mvns	r2, r3
 8007a88:	4b18      	ldr	r3, [pc, #96]	; (8007aec <xTaskPriorityDisinherit+0x108>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <xTaskPriorityDisinherit+0x108>)
 8007a90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	f1c3 0205 	rsb	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	2201      	movs	r2, #1
 8007aac:	409a      	lsls	r2, r3
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <xTaskPriorityDisinherit+0x108>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	; (8007aec <xTaskPriorityDisinherit+0x108>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <xTaskPriorityDisinherit+0x104>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fa8b 	bl	8005fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad8:	697b      	ldr	r3, [r7, #20]
	}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000278 	.word	0x20000278
 8007ae8:	2000027c 	.word	0x2000027c
 8007aec:	20000358 	.word	0x20000358

08007af0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 8083 	beq.w	8007c10 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d902      	bls.n	8007b38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e002      	b.n	8007b3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d063      	beq.n	8007c10 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d15e      	bne.n	8007c10 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b52:	4b31      	ldr	r3, [pc, #196]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d10a      	bne.n	8007b72 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60bb      	str	r3, [r7, #8]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	db04      	blt.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f1c3 0205 	rsb	r2, r3, #5
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	6959      	ldr	r1, [r3, #20]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	d134      	bne.n	8007c10 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fa7a 	bl	80060a4 <uxListRemove>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d115      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	4918      	ldr	r1, [pc, #96]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43da      	mvns	r2, r3
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	4a10      	ldr	r2, [pc, #64]	; (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007be0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	2201      	movs	r2, #1
 8007be8:	409a      	lsls	r2, r3
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	4a0b      	ldr	r2, [pc, #44]	; (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007c02:	441a      	add	r2, r3
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f7fe f9ed 	bl	8005fea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c10:	bf00      	nop
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000278 	.word	0x20000278
 8007c1c:	2000027c 	.word	0x2000027c
 8007c20:	20000358 	.word	0x20000358

08007c24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c36:	3201      	adds	r2, #1
 8007c38:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8007c3a:	4b03      	ldr	r3, [pc, #12]	; (8007c48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
	}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	20000278 	.word	0x20000278

08007c4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c56:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c5c:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe fa1e 	bl	80060a4 <uxListRemove>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43da      	mvns	r2, r3
 8007c7c:	4b21      	ldr	r3, [pc, #132]	; (8007d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4013      	ands	r3, r2
 8007c82:	4a20      	ldr	r2, [pc, #128]	; (8007d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d10a      	bne.n	8007ca4 <prvAddCurrentTaskToDelayedList+0x58>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c94:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	481a      	ldr	r0, [pc, #104]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c9e:	f7fe f9a4 	bl	8005fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ca2:	e026      	b.n	8007cf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d209      	bcs.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7fe f9b2 	bl	8006032 <vListInsert>
}
 8007cce:	e010      	b.n	8007cf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fe f9a8 	bl	8006032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d202      	bcs.n	8007cf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cec:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6013      	str	r3, [r2, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000354 	.word	0x20000354
 8007d00:	20000278 	.word	0x20000278
 8007d04:	20000358 	.word	0x20000358
 8007d08:	2000033c 	.word	0x2000033c
 8007d0c:	2000030c 	.word	0x2000030c
 8007d10:	20000308 	.word	0x20000308
 8007d14:	20000370 	.word	0x20000370

08007d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d22:	f000 fad5 	bl	80082d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <xTimerCreateTimerTask+0x54>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <xTimerCreateTimerTask+0x58>)
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	2302      	movs	r3, #2
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d3c:	490d      	ldr	r1, [pc, #52]	; (8007d74 <xTimerCreateTimerTask+0x5c>)
 8007d3e:	480e      	ldr	r0, [pc, #56]	; (8007d78 <xTimerCreateTimerTask+0x60>)
 8007d40:	f7ff f838 	bl	8006db4 <xTaskCreate>
 8007d44:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	603b      	str	r3, [r7, #0]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8007d62:	687b      	ldr	r3, [r7, #4]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	200003ac 	.word	0x200003ac
 8007d70:	200003b0 	.word	0x200003b0
 8007d74:	0800ab0c 	.word	0x0800ab0c
 8007d78:	08007eb1 	.word	0x08007eb1

08007d7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	623b      	str	r3, [r7, #32]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007daa:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <xTimerGenericCommand+0x98>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d02a      	beq.n	8007e08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	dc18      	bgt.n	8007df6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dc4:	f7ff fd70 	bl	80078a8 <xTaskGetSchedulerState>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d109      	bne.n	8007de2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <xTimerGenericCommand+0x98>)
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f107 0114 	add.w	r1, r7, #20
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dda:	f7fe fa55 	bl	8006288 <xQueueGenericSend>
 8007dde:	6278      	str	r0, [r7, #36]	; 0x24
 8007de0:	e012      	b.n	8007e08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <xTimerGenericCommand+0x98>)
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	f107 0114 	add.w	r1, r7, #20
 8007dea:	2300      	movs	r3, #0
 8007dec:	2200      	movs	r2, #0
 8007dee:	f7fe fa4b 	bl	8006288 <xQueueGenericSend>
 8007df2:	6278      	str	r0, [r7, #36]	; 0x24
 8007df4:	e008      	b.n	8007e08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007df6:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <xTimerGenericCommand+0x98>)
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f107 0114 	add.w	r1, r7, #20
 8007dfe:	2300      	movs	r3, #0
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	f7fe fb3f 	bl	8006484 <xQueueGenericSendFromISR>
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3728      	adds	r7, #40	; 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200003ac 	.word	0x200003ac

08007e18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e22:	4b22      	ldr	r3, [pc, #136]	; (8007eac <prvProcessExpiredTimer+0x94>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe f937 	bl	80060a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d022      	beq.n	8007e8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	18d1      	adds	r1, r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	6978      	ldr	r0, [r7, #20]
 8007e52:	f000 f8d1 	bl	8007ff8 <prvInsertTimerInActiveList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01f      	beq.n	8007e9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	2100      	movs	r1, #0
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f7ff ff88 	bl	8007d7c <xTimerGenericCommand>
 8007e6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d113      	bne.n	8007e9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	6978      	ldr	r0, [r7, #20]
 8007ea2:	4798      	blx	r3
}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	200003a4 	.word	0x200003a4

08007eb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f857 	bl	8007f70 <prvGetNextExpireTime>
 8007ec2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f803 	bl	8007ed4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ece:	f000 f8d5 	bl	800807c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ed2:	e7f1      	b.n	8007eb8 <prvTimerTask+0x8>

08007ed4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ede:	f7ff f929 	bl	8007134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ee2:	f107 0308 	add.w	r3, r7, #8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f866 	bl	8007fb8 <prvSampleTimeNow>
 8007eec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d130      	bne.n	8007f56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <prvProcessTimerOrBlockTask+0x3c>
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d806      	bhi.n	8007f10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f02:	f7ff f925 	bl	8007150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff ff85 	bl	8007e18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f0e:	e024      	b.n	8007f5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d008      	beq.n	8007f28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <prvProcessTimerOrBlockTask+0x90>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <prvProcessTimerOrBlockTask+0x50>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <prvProcessTimerOrBlockTask+0x52>
 8007f24:	2300      	movs	r3, #0
 8007f26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f28:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <prvProcessTimerOrBlockTask+0x94>)
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f7fe ff09 	bl	8006d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f3a:	f7ff f909 	bl	8007150 <xTaskResumeAll>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <prvProcessTimerOrBlockTask+0x98>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
}
 8007f54:	e001      	b.n	8007f5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f56:	f7ff f8fb 	bl	8007150 <xTaskResumeAll>
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	200003a8 	.word	0x200003a8
 8007f68:	200003ac 	.word	0x200003ac
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f78:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <prvGetNextExpireTime+0x44>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <prvGetNextExpireTime+0x16>
 8007f82:	2201      	movs	r2, #1
 8007f84:	e000      	b.n	8007f88 <prvGetNextExpireTime+0x18>
 8007f86:	2200      	movs	r2, #0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <prvGetNextExpireTime+0x44>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e001      	b.n	8007fa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	200003a4 	.word	0x200003a4

08007fb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fc0:	f7ff f962 	bl	8007288 <xTaskGetTickCount>
 8007fc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <prvSampleTimeNow+0x3c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d205      	bcs.n	8007fdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fd0:	f000 f91a 	bl	8008208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	e002      	b.n	8007fe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fe2:	4a04      	ldr	r2, [pc, #16]	; (8007ff4 <prvSampleTimeNow+0x3c>)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	200003b4 	.word	0x200003b4

08007ff8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d812      	bhi.n	8008044 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	429a      	cmp	r2, r3
 800802a:	d302      	bcc.n	8008032 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800802c:	2301      	movs	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e01b      	b.n	800806a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <prvInsertTimerInActiveList+0x7c>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3304      	adds	r3, #4
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f7fd fff8 	bl	8006032 <vListInsert>
 8008042:	e012      	b.n	800806a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d206      	bcs.n	800805a <prvInsertTimerInActiveList+0x62>
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e007      	b.n	800806a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <prvInsertTimerInActiveList+0x80>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3304      	adds	r3, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7fd ffe4 	bl	8006032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800806a:	697b      	ldr	r3, [r7, #20]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200003a8 	.word	0x200003a8
 8008078:	200003a4 	.word	0x200003a4

0800807c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08c      	sub	sp, #48	; 0x30
 8008080:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008082:	e0ae      	b.n	80081e2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f2c0 80aa 	blt.w	80081e0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe f801 	bl	80060a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080a2:	1d3b      	adds	r3, r7, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ff87 	bl	8007fb8 <prvSampleTimeNow>
 80080aa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	f200 8097 	bhi.w	80081e2 <prvProcessReceivedCommands+0x166>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <prvProcessReceivedCommands+0x40>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	08008159 	.word	0x08008159
 80080cc:	0800816d 	.word	0x0800816d
 80080d0:	080081b7 	.word	0x080081b7
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080e5 	.word	0x080080e5
 80080dc:	08008159 	.word	0x08008159
 80080e0:	0800816d 	.word	0x0800816d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	18d1      	adds	r1, r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008104:	f7ff ff78 	bl	8007ff8 <prvInsertTimerInActiveList>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d069      	beq.n	80081e2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008114:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d05e      	beq.n	80081e2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	441a      	add	r2, r3
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	2100      	movs	r1, #0
 8008134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008136:	f7ff fe21 	bl	8007d7c <xTimerGenericCommand>
 800813a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d14f      	bne.n	80081e2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	61bb      	str	r3, [r7, #24]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800816a:	e03a      	b.n	80081e2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	617b      	str	r3, [r7, #20]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	18d1      	adds	r1, r2, r3
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	6a3a      	ldr	r2, [r7, #32]
 80081ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081b0:	f7ff ff22 	bl	8007ff8 <prvInsertTimerInActiveList>
					break;
 80081b4:	e015      	b.n	80081e2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80081c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081c6:	f000 fbcb 	bl	8008960 <vPortFree>
 80081ca:	e00a      	b.n	80081e2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081de:	e000      	b.n	80081e2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80081e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081e2:	4b08      	ldr	r3, [pc, #32]	; (8008204 <prvProcessReceivedCommands+0x188>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f107 0108 	add.w	r1, r7, #8
 80081ea:	2200      	movs	r2, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fa6f 	bl	80066d0 <xQueueReceive>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f47f af45 	bne.w	8008084 <prvProcessReceivedCommands+0x8>
	}
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	3728      	adds	r7, #40	; 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200003ac 	.word	0x200003ac

08008208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800820e:	e048      	b.n	80082a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008210:	4b2d      	ldr	r3, [pc, #180]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821a:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3304      	adds	r3, #4
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd ff3b 	bl	80060a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02e      	beq.n	80082a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	429a      	cmp	r2, r3
 8008254:	d90e      	bls.n	8008274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008262:	4b19      	ldr	r3, [pc, #100]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3304      	adds	r3, #4
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7fd fee0 	bl	8006032 <vListInsert>
 8008272:	e016      	b.n	80082a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008274:	2300      	movs	r3, #0
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff fd7c 	bl	8007d7c <xTimerGenericCommand>
 8008284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	603b      	str	r3, [r7, #0]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082a2:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1b1      	bne.n	8008210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082b2:	4b06      	ldr	r3, [pc, #24]	; (80082cc <prvSwitchTimerLists+0xc4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <prvSwitchTimerLists+0xc0>)
 80082b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082ba:	4a04      	ldr	r2, [pc, #16]	; (80082cc <prvSwitchTimerLists+0xc4>)
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	6013      	str	r3, [r2, #0]
}
 80082c0:	bf00      	nop
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200003a4 	.word	0x200003a4
 80082cc:	200003a8 	.word	0x200003a8

080082d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082d4:	f000 f95e 	bl	8008594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <prvCheckForValidListAndQueue+0x54>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11d      	bne.n	800831c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80082e0:	4811      	ldr	r0, [pc, #68]	; (8008328 <prvCheckForValidListAndQueue+0x58>)
 80082e2:	f7fd fe55 	bl	8005f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082e6:	4811      	ldr	r0, [pc, #68]	; (800832c <prvCheckForValidListAndQueue+0x5c>)
 80082e8:	f7fd fe52 	bl	8005f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <prvCheckForValidListAndQueue+0x60>)
 80082ee:	4a0e      	ldr	r2, [pc, #56]	; (8008328 <prvCheckForValidListAndQueue+0x58>)
 80082f0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082f2:	4b10      	ldr	r3, [pc, #64]	; (8008334 <prvCheckForValidListAndQueue+0x64>)
 80082f4:	4a0d      	ldr	r2, [pc, #52]	; (800832c <prvCheckForValidListAndQueue+0x5c>)
 80082f6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80082f8:	2200      	movs	r2, #0
 80082fa:	210c      	movs	r1, #12
 80082fc:	200a      	movs	r0, #10
 80082fe:	f7fd ff63 	bl	80061c8 <xQueueGenericCreate>
 8008302:	4603      	mov	r3, r0
 8008304:	4a07      	ldr	r2, [pc, #28]	; (8008324 <prvCheckForValidListAndQueue+0x54>)
 8008306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <prvCheckForValidListAndQueue+0x54>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <prvCheckForValidListAndQueue+0x54>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4908      	ldr	r1, [pc, #32]	; (8008338 <prvCheckForValidListAndQueue+0x68>)
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fcee 	bl	8006cf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800831c:	f000 f96a 	bl	80085f4 <vPortExitCritical>
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}
 8008324:	200003ac 	.word	0x200003ac
 8008328:	2000037c 	.word	0x2000037c
 800832c:	20000390 	.word	0x20000390
 8008330:	200003a4 	.word	0x200003a4
 8008334:	200003a8 	.word	0x200003a8
 8008338:	0800ab14 	.word	0x0800ab14

0800833c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3b04      	subs	r3, #4
 800834c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3b04      	subs	r3, #4
 800835a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f023 0201 	bic.w	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3b04      	subs	r3, #4
 800836a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800836c:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <pxPortInitialiseStack+0x64>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3b14      	subs	r3, #20
 8008376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3b04      	subs	r3, #4
 8008382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f06f 0202 	mvn.w	r2, #2
 800838a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b20      	subs	r3, #32
 8008390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008392:	68fb      	ldr	r3, [r7, #12]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	080083a5 	.word	0x080083a5

080083a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <prvTaskExitError+0x54>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b6:	d00a      	beq.n	80083ce <prvTaskExitError+0x2a>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	60fb      	str	r3, [r7, #12]
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <prvTaskExitError+0x28>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60bb      	str	r3, [r7, #8]
}
 80083e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083e2:	bf00      	nop
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0fc      	beq.n	80083e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000054 	.word	0x20000054
 80083fc:	00000000 	.word	0x00000000

08008400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	20000278 	.word	0x20000278
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <prvPortStartFirstTask+0x24>)
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	6800      	ldr	r0, [r0, #0]
 800842e:	f380 8808 	msr	MSP, r0
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8814 	msr	CONTROL, r0
 800843a:	b662      	cpsie	i
 800843c:	b661      	cpsie	f
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	df00      	svc	0
 8008448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800844a:	bf00      	nop
 800844c:	e000ed08 	.word	0xe000ed08

08008450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008456:	4b46      	ldr	r3, [pc, #280]	; (8008570 <xPortStartScheduler+0x120>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a46      	ldr	r2, [pc, #280]	; (8008574 <xPortStartScheduler+0x124>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10a      	bne.n	8008476 <xPortStartScheduler+0x26>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	613b      	str	r3, [r7, #16]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008476:	4b3e      	ldr	r3, [pc, #248]	; (8008570 <xPortStartScheduler+0x120>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a3f      	ldr	r2, [pc, #252]	; (8008578 <xPortStartScheduler+0x128>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10a      	bne.n	8008496 <xPortStartScheduler+0x46>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008496:	4b39      	ldr	r3, [pc, #228]	; (800857c <xPortStartScheduler+0x12c>)
 8008498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4b31      	ldr	r3, [pc, #196]	; (8008580 <xPortStartScheduler+0x130>)
 80084bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084be:	4b31      	ldr	r3, [pc, #196]	; (8008584 <xPortStartScheduler+0x134>)
 80084c0:	2207      	movs	r2, #7
 80084c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084c4:	e009      	b.n	80084da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084c6:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <xPortStartScheduler+0x134>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	4a2d      	ldr	r2, [pc, #180]	; (8008584 <xPortStartScheduler+0x134>)
 80084ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d0ef      	beq.n	80084c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084e6:	4b27      	ldr	r3, [pc, #156]	; (8008584 <xPortStartScheduler+0x134>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f1c3 0307 	rsb	r3, r3, #7
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d00a      	beq.n	8008508 <xPortStartScheduler+0xb8>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60bb      	str	r3, [r7, #8]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008508:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <xPortStartScheduler+0x134>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <xPortStartScheduler+0x134>)
 8008510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <xPortStartScheduler+0x134>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800851a:	4a1a      	ldr	r2, [pc, #104]	; (8008584 <xPortStartScheduler+0x134>)
 800851c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008526:	4b18      	ldr	r3, [pc, #96]	; (8008588 <xPortStartScheduler+0x138>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <xPortStartScheduler+0x138>)
 800852c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <xPortStartScheduler+0x138>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a14      	ldr	r2, [pc, #80]	; (8008588 <xPortStartScheduler+0x138>)
 8008538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800853c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800853e:	f000 f8dd 	bl	80086fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <xPortStartScheduler+0x13c>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008548:	f000 f8fc 	bl	8008744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800854c:	4b10      	ldr	r3, [pc, #64]	; (8008590 <xPortStartScheduler+0x140>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0f      	ldr	r2, [pc, #60]	; (8008590 <xPortStartScheduler+0x140>)
 8008552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008558:	f7ff ff66 	bl	8008428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800855c:	f7fe ff5c 	bl	8007418 <vTaskSwitchContext>
	prvTaskExitError();
 8008560:	f7ff ff20 	bl	80083a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	e000ed00 	.word	0xe000ed00
 8008574:	410fc271 	.word	0x410fc271
 8008578:	410fc270 	.word	0x410fc270
 800857c:	e000e400 	.word	0xe000e400
 8008580:	200003b8 	.word	0x200003b8
 8008584:	200003bc 	.word	0x200003bc
 8008588:	e000ed20 	.word	0xe000ed20
 800858c:	20000054 	.word	0x20000054
 8008590:	e000ef34 	.word	0xe000ef34

08008594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	607b      	str	r3, [r7, #4]
}
 80085ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ae:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <vPortEnterCritical+0x58>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <vPortEnterCritical+0x58>)
 80085b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <vPortEnterCritical+0x58>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10f      	bne.n	80085e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <vPortEnterCritical+0x5c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	603b      	str	r3, [r7, #0]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <vPortEnterCritical+0x4a>
	}
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	20000054 	.word	0x20000054
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <vPortExitCritical+0x50>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <vPortExitCritical+0x24>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	607b      	str	r3, [r7, #4]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <vPortExitCritical+0x50>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3b01      	subs	r3, #1
 800861e:	4a09      	ldr	r2, [pc, #36]	; (8008644 <vPortExitCritical+0x50>)
 8008620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008622:	4b08      	ldr	r3, [pc, #32]	; (8008644 <vPortExitCritical+0x50>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <vPortExitCritical+0x42>
 800862a:	2300      	movs	r3, #0
 800862c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f383 8811 	msr	BASEPRI, r3
}
 8008634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000054 	.word	0x20000054
	...

08008650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008650:	f3ef 8009 	mrs	r0, PSP
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <pxCurrentTCBConst>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f01e 0f10 	tst.w	lr, #16
 8008660:	bf08      	it	eq
 8008662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	6010      	str	r0, [r2, #0]
 800866c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008674:	f380 8811 	msr	BASEPRI, r0
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f7fe feca 	bl	8007418 <vTaskSwitchContext>
 8008684:	f04f 0000 	mov.w	r0, #0
 8008688:	f380 8811 	msr	BASEPRI, r0
 800868c:	bc09      	pop	{r0, r3}
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	6808      	ldr	r0, [r1, #0]
 8008692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008696:	f01e 0f10 	tst.w	lr, #16
 800869a:	bf08      	it	eq
 800869c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086a0:	f380 8809 	msr	PSP, r0
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst>:
 80086b0:	20000278 	.word	0x20000278
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086d2:	f7fe fde9 	bl	80072a8 <xTaskIncrementTick>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <SysTick_Handler+0x40>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f383 8811 	msr	BASEPRI, r3
}
 80086ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <vPortSetupTimerInterrupt+0x38>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <vPortSetupTimerInterrupt+0x3c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <vPortSetupTimerInterrupt+0x40>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <vPortSetupTimerInterrupt+0x44>)
 800871a:	3b01      	subs	r3, #1
 800871c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	e000e010 	.word	0xe000e010
 8008734:	e000e018 	.word	0xe000e018
 8008738:	20000048 	.word	0x20000048
 800873c:	10624dd3 	.word	0x10624dd3
 8008740:	e000e014 	.word	0xe000e014

08008744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008754 <vPortEnableVFP+0x10>
 8008748:	6801      	ldr	r1, [r0, #0]
 800874a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800874e:	6001      	str	r1, [r0, #0]
 8008750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008752:	bf00      	nop
 8008754:	e000ed88 	.word	0xe000ed88

08008758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800875e:	f3ef 8305 	mrs	r3, IPSR
 8008762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b0f      	cmp	r3, #15
 8008768:	d914      	bls.n	8008794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <vPortValidateInterruptPriority+0x70>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008774:	4b15      	ldr	r3, [pc, #84]	; (80087cc <vPortValidateInterruptPriority+0x74>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	7afa      	ldrb	r2, [r7, #11]
 800877a:	429a      	cmp	r2, r3
 800877c:	d20a      	bcs.n	8008794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <vPortValidateInterruptPriority+0x78>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800879c:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <vPortValidateInterruptPriority+0x7c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d90a      	bls.n	80087ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	603b      	str	r3, [r7, #0]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <vPortValidateInterruptPriority+0x60>
	}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	e000e3f0 	.word	0xe000e3f0
 80087cc:	200003b8 	.word	0x200003b8
 80087d0:	e000ed0c 	.word	0xe000ed0c
 80087d4:	200003bc 	.word	0x200003bc

080087d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087e4:	f7fe fca6 	bl	8007134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087e8:	4b58      	ldr	r3, [pc, #352]	; (800894c <pvPortMalloc+0x174>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087f0:	f000 f910 	bl	8008a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087f4:	4b56      	ldr	r3, [pc, #344]	; (8008950 <pvPortMalloc+0x178>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 808e 	bne.w	800891e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01d      	beq.n	8008844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008808:	2208      	movs	r2, #8
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d014      	beq.n	8008844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f023 0307 	bic.w	r3, r3, #7
 8008820:	3308      	adds	r3, #8
 8008822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <pvPortMalloc+0x6c>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	617b      	str	r3, [r7, #20]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d069      	beq.n	800891e <pvPortMalloc+0x146>
 800884a:	4b42      	ldr	r3, [pc, #264]	; (8008954 <pvPortMalloc+0x17c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d864      	bhi.n	800891e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008854:	4b40      	ldr	r3, [pc, #256]	; (8008958 <pvPortMalloc+0x180>)
 8008856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008858:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <pvPortMalloc+0x180>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800885e:	e004      	b.n	800886a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d903      	bls.n	800887c <pvPortMalloc+0xa4>
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f1      	bne.n	8008860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800887c:	4b33      	ldr	r3, [pc, #204]	; (800894c <pvPortMalloc+0x174>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	429a      	cmp	r2, r3
 8008884:	d04b      	beq.n	800891e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2208      	movs	r2, #8
 800888c:	4413      	add	r3, r2
 800888e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	2308      	movs	r3, #8
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d91f      	bls.n	80088e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <pvPortMalloc+0xf8>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	613b      	str	r3, [r7, #16]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	1ad2      	subs	r2, r2, r3
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088e2:	69b8      	ldr	r0, [r7, #24]
 80088e4:	f000 f8f8 	bl	8008ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <pvPortMalloc+0x17c>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	4a18      	ldr	r2, [pc, #96]	; (8008954 <pvPortMalloc+0x17c>)
 80088f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088f6:	4b17      	ldr	r3, [pc, #92]	; (8008954 <pvPortMalloc+0x17c>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b18      	ldr	r3, [pc, #96]	; (800895c <pvPortMalloc+0x184>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d203      	bcs.n	800890a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008902:	4b14      	ldr	r3, [pc, #80]	; (8008954 <pvPortMalloc+0x17c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a15      	ldr	r2, [pc, #84]	; (800895c <pvPortMalloc+0x184>)
 8008908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <pvPortMalloc+0x178>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	431a      	orrs	r2, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800891e:	f7fe fc17 	bl	8007150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <pvPortMalloc+0x16a>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <pvPortMalloc+0x168>
	return pvReturn;
 8008942:	69fb      	ldr	r3, [r7, #28]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	; 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20012fc8 	.word	0x20012fc8
 8008950:	20012fd4 	.word	0x20012fd4
 8008954:	20012fcc 	.word	0x20012fcc
 8008958:	20012fc0 	.word	0x20012fc0
 800895c:	20012fd0 	.word	0x20012fd0

08008960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d048      	beq.n	8008a04 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008972:	2308      	movs	r3, #8
 8008974:	425b      	negs	r3, r3
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <vPortFree+0xac>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <vPortFree+0x44>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	60fb      	str	r3, [r7, #12]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <vPortFree+0x62>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60bb      	str	r3, [r7, #8]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <vPortFree+0xac>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d019      	beq.n	8008a04 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d115      	bne.n	8008a04 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <vPortFree+0xac>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	401a      	ands	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089e8:	f7fe fba4 	bl	8007134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <vPortFree+0xb0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	4a06      	ldr	r2, [pc, #24]	; (8008a10 <vPortFree+0xb0>)
 80089f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f000 f86c 	bl	8008ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a00:	f7fe fba6 	bl	8007150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a04:	bf00      	nop
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20012fd4 	.word	0x20012fd4
 8008a10:	20012fcc 	.word	0x20012fcc

08008a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a1a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a20:	4b27      	ldr	r3, [pc, #156]	; (8008ac0 <prvHeapInit+0xac>)
 8008a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00c      	beq.n	8008a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3307      	adds	r3, #7
 8008a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0307 	bic.w	r3, r3, #7
 8008a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	4a1f      	ldr	r2, [pc, #124]	; (8008ac0 <prvHeapInit+0xac>)
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <prvHeapInit+0xb0>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <prvHeapInit+0xb0>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a60:	2208      	movs	r2, #8
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0307 	bic.w	r3, r3, #7
 8008a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a94:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvHeapInit+0xb4>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <prvHeapInit+0xb8>)
 8008aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <prvHeapInit+0xbc>)
 8008aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <prvHeapInit+0xc0>)
 8008aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ab2:	601a      	str	r2, [r3, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	200003c0 	.word	0x200003c0
 8008ac4:	20012fc0 	.word	0x20012fc0
 8008ac8:	20012fc8 	.word	0x20012fc8
 8008acc:	20012fd0 	.word	0x20012fd0
 8008ad0:	20012fcc 	.word	0x20012fcc
 8008ad4:	20012fd4 	.word	0x20012fd4

08008ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <prvInsertBlockIntoFreeList+0xac>)
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e002      	b.n	8008aec <prvInsertBlockIntoFreeList+0x14>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d8f7      	bhi.n	8008ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d108      	bne.n	8008b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	441a      	add	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d118      	bne.n	8008b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <prvInsertBlockIntoFreeList+0xb0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d00d      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	441a      	add	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e008      	b.n	8008b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <prvInsertBlockIntoFreeList+0xb0>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d002      	beq.n	8008b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b76:	bf00      	nop
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20012fc0 	.word	0x20012fc0
 8008b88:	20012fc8 	.word	0x20012fc8

08008b8c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008b98:	2010      	movs	r0, #16
 8008b9a:	f001 ff1b 	bl	800a9d4 <USBD_static_malloc>
 8008b9e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e01b      	b.n	8008bea <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7c1b      	ldrb	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2207      	movs	r2, #7
 8008bc6:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008bc8:	e002      	b.n	8008bd0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	220a      	movs	r2, #10
 8008bce:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	2181      	movs	r1, #129	; 0x81
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 fdeb 	bl	800a7b2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008bfe:	2181      	movs	r1, #129	; 0x81
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fdfc 	bl	800a7fe <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fee4 	bl	800a9f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e0e8      	b.n	8008e32 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d046      	beq.n	8008cfa <USBD_HID_Setup+0xbe>
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	f040 80d8 	bne.w	8008e22 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	3b02      	subs	r3, #2
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d836      	bhi.n	8008cea <USBD_HID_Setup+0xae>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBD_HID_Setup+0x48>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008cdb 	.word	0x08008cdb
 8008c88:	08008cbb 	.word	0x08008cbb
 8008c8c:	08008ceb 	.word	0x08008ceb
 8008c90:	08008ceb 	.word	0x08008ceb
 8008c94:	08008ceb 	.word	0x08008ceb
 8008c98:	08008ceb 	.word	0x08008ceb
 8008c9c:	08008ceb 	.word	0x08008ceb
 8008ca0:	08008ceb 	.word	0x08008ceb
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cad 	.word	0x08008cad
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	885b      	ldrh	r3, [r3, #2]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]
          break;
 8008cb8:	e01e      	b.n	8008cf8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fa22 	bl	800a10a <USBD_CtlSendData>
          break;
 8008cc6:	e017      	b.n	8008cf8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	885b      	ldrh	r3, [r3, #2]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]
          break;
 8008cd8:	e00e      	b.n	8008cf8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fa11 	bl	800a10a <USBD_CtlSendData>
          break;
 8008ce8:	e006      	b.n	8008cf8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 f99b 	bl	800a028 <USBD_CtlError>
          ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf6:	bf00      	nop
      }
      break;
 8008cf8:	e09a      	b.n	8008e30 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b0b      	cmp	r3, #11
 8008d00:	f200 8086 	bhi.w	8008e10 <USBD_HID_Setup+0x1d4>
 8008d04:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <USBD_HID_Setup+0xd0>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d3d 	.word	0x08008d3d
 8008d10:	08008e1f 	.word	0x08008e1f
 8008d14:	08008e11 	.word	0x08008e11
 8008d18:	08008e11 	.word	0x08008e11
 8008d1c:	08008e11 	.word	0x08008e11
 8008d20:	08008e11 	.word	0x08008e11
 8008d24:	08008d67 	.word	0x08008d67
 8008d28:	08008e11 	.word	0x08008e11
 8008d2c:	08008e11 	.word	0x08008e11
 8008d30:	08008e11 	.word	0x08008e11
 8008d34:	08008dbf 	.word	0x08008dbf
 8008d38:	08008de9 	.word	0x08008de9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d107      	bne.n	8008d58 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d48:	f107 030a 	add.w	r3, r7, #10
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f9da 	bl	800a10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d56:	e063      	b.n	8008e20 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 f964 	bl	800a028 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d60:	2303      	movs	r3, #3
 8008d62:	75fb      	strb	r3, [r7, #23]
          break;
 8008d64:	e05c      	b.n	8008e20 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b22      	cmp	r3, #34	; 0x22
 8008d70:	d108      	bne.n	8008d84 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	2b3f      	cmp	r3, #63	; 0x3f
 8008d78:	bf28      	it	cs
 8008d7a:	233f      	movcs	r3, #63	; 0x3f
 8008d7c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008d7e:	4b2f      	ldr	r3, [pc, #188]	; (8008e3c <USBD_HID_Setup+0x200>)
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	e015      	b.n	8008db0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b21      	cmp	r3, #33	; 0x21
 8008d8e:	d108      	bne.n	8008da2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <USBD_HID_Setup+0x204>)
 8008d92:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	88db      	ldrh	r3, [r3, #6]
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	bf28      	it	cs
 8008d9c:	2309      	movcs	r3, #9
 8008d9e:	82bb      	strh	r3, [r7, #20]
 8008da0:	e006      	b.n	8008db0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f93f 	bl	800a028 <USBD_CtlError>
            ret = USBD_FAIL;
 8008daa:	2303      	movs	r3, #3
 8008dac:	75fb      	strb	r3, [r7, #23]
            break;
 8008dae:	e037      	b.n	8008e20 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008db0:	8abb      	ldrh	r3, [r7, #20]
 8008db2:	461a      	mov	r2, r3
 8008db4:	6939      	ldr	r1, [r7, #16]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 f9a7 	bl	800a10a <USBD_CtlSendData>
          break;
 8008dbc:	e030      	b.n	8008e20 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d107      	bne.n	8008dda <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f999 	bl	800a10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd8:	e022      	b.n	8008e20 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f923 	bl	800a028 <USBD_CtlError>
            ret = USBD_FAIL;
 8008de2:	2303      	movs	r3, #3
 8008de4:	75fb      	strb	r3, [r7, #23]
          break;
 8008de6:	e01b      	b.n	8008e20 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d106      	bne.n	8008e02 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	885b      	ldrh	r3, [r3, #2]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e00:	e00e      	b.n	8008e20 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f90f 	bl	800a028 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0e:	e007      	b.n	8008e20 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 f908 	bl	800a028 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e1c:	e000      	b.n	8008e20 <USBD_HID_Setup+0x1e4>
          break;
 8008e1e:	bf00      	nop
      }
      break;
 8008e20:	e006      	b.n	8008e30 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f8ff 	bl	800a028 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e2e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000114 	.word	0x20000114
 8008e40:	200000fc 	.word	0x200000fc

08008e44 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e58:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e013      	b.n	8008e8c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d10c      	bne.n	8008e8a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	7b1b      	ldrb	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d108      	bne.n	8008e8a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	2181      	movs	r1, #129	; 0x81
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f001 fd62 	bl	800a94e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2222      	movs	r2, #34	; 0x22
 8008ea0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008ea2:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	20000090 	.word	0x20000090

08008eb4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2222      	movs	r2, #34	; 0x22
 8008ec0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008ec2:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	200000b4 	.word	0x200000b4

08008ed4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2222      	movs	r2, #34	; 0x22
 8008ee0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	200000d8 	.word	0x200000d8

08008ef4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f06:	2200      	movs	r2, #0
 8008f08:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	220a      	movs	r2, #10
 8008f24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008f26:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	20000108 	.word	0x20000108

08008f38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e01f      	b.n	8008f90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	79fa      	ldrb	r2, [r7, #7]
 8008f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f001 fbad 	bl	800a6e4 <USBD_LL_Init>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e016      	b.n	8008fde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	f107 020e 	add.w	r2, r7, #14
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fbc4 	bl	800a77c <USBD_LL_Start>
 8008ff4:	4603      	mov	r3, r0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	4611      	mov	r1, r2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
  }

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 ff90 	bl	8009fb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090a2:	461a      	mov	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d01a      	beq.n	80090ee <USBD_LL_SetupStage+0x72>
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d822      	bhi.n	8009102 <USBD_LL_SetupStage+0x86>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <USBD_LL_SetupStage+0x4a>
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d00a      	beq.n	80090da <USBD_LL_SetupStage+0x5e>
 80090c4:	e01d      	b.n	8009102 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa62 	bl	8009598 <USBD_StdDevReq>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
      break;
 80090d8:	e020      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fac6 	bl	8009674 <USBD_StdItfReq>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]
      break;
 80090ec:	e016      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fb05 	bl	8009706 <USBD_StdEPReq>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009100:	e00c      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fb93 	bl	800a83c <USBD_LL_StallEP>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
      break;
 800911a:	bf00      	nop
  }

  return ret;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	460b      	mov	r3, r1
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d138      	bne.n	80091ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009140:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009148:	2b03      	cmp	r3, #3
 800914a:	d14a      	bne.n	80091e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	429a      	cmp	r2, r3
 8009156:	d913      	bls.n	8009180 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	1ad2      	subs	r2, r2, r3
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	4293      	cmp	r3, r2
 8009170:	bf28      	it	cs
 8009172:	4613      	movcs	r3, r2
 8009174:	461a      	mov	r2, r3
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fff2 	bl	800a162 <USBD_CtlContinueRx>
 800917e:	e030      	b.n	80091e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b03      	cmp	r3, #3
 800918a:	d10b      	bne.n	80091a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 ffed 	bl	800a184 <USBD_CtlSendStatus>
 80091aa:	e01a      	b.n	80091e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d114      	bne.n	80091e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00e      	beq.n	80091e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	7afa      	ldrb	r2, [r7, #11]
 80091ce:	4611      	mov	r1, r2
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	e000      	b.n	80091e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	460b      	mov	r3, r1
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d16b      	bne.n	80092d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3314      	adds	r3, #20
 8009204:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800920c:	2b02      	cmp	r3, #2
 800920e:	d156      	bne.n	80092be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	429a      	cmp	r2, r3
 800921a:	d914      	bls.n	8009246 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	461a      	mov	r2, r3
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 ff84 	bl	800a140 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009238:	2300      	movs	r3, #0
 800923a:	2200      	movs	r2, #0
 800923c:	2100      	movs	r1, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f001 fba6 	bl	800a990 <USBD_LL_PrepareReceive>
 8009244:	e03b      	b.n	80092be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	429a      	cmp	r2, r3
 8009250:	d11c      	bne.n	800928c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800925a:	429a      	cmp	r2, r3
 800925c:	d316      	bcc.n	800928c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009268:	429a      	cmp	r2, r3
 800926a:	d20f      	bcs.n	800928c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800926c:	2200      	movs	r2, #0
 800926e:	2100      	movs	r1, #0
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 ff65 	bl	800a140 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927e:	2300      	movs	r3, #0
 8009280:	2200      	movs	r2, #0
 8009282:	2100      	movs	r1, #0
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f001 fb83 	bl	800a990 <USBD_LL_PrepareReceive>
 800928a:	e018      	b.n	80092be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b03      	cmp	r3, #3
 8009296:	d10b      	bne.n	80092b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b0:	2180      	movs	r1, #128	; 0x80
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f001 fac2 	bl	800a83c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 ff76 	bl	800a1aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d122      	bne.n	800930e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff fe98 	bl	8008ffe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092d6:	e01a      	b.n	800930e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d114      	bne.n	800930e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00e      	beq.n	800930e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	4611      	mov	r1, r2
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	e000      	b.n	8009310 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009348:	2303      	movs	r3, #3
 800934a:	e02f      	b.n	80093ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00f      	beq.n	8009376 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d009      	beq.n	8009376 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6852      	ldr	r2, [r2, #4]
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	4611      	mov	r1, r2
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009376:	2340      	movs	r3, #64	; 0x40
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 fa18 	bl	800a7b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2240      	movs	r2, #64	; 0x40
 800938e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	2200      	movs	r2, #0
 8009396:	2180      	movs	r1, #128	; 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fa0a 	bl	800a7b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b04      	cmp	r3, #4
 8009412:	d106      	bne.n	8009422 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800941a:	b2da      	uxtb	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009442:	2303      	movs	r3, #3
 8009444:	e012      	b.n	800946c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b03      	cmp	r3, #3
 8009450:	d10b      	bne.n	800946a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800948a:	2303      	movs	r3, #3
 800948c:	e014      	b.n	80094b8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d10d      	bne.n	80094b6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e014      	b.n	8009504 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d10d      	bne.n	8009502 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	78fa      	ldrb	r2, [r7, #3]
 80094fc:	4611      	mov	r1, r2
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6852      	ldr	r2, [r2, #4]
 8009548:	b2d2      	uxtb	r2, r2
 800954a:	4611      	mov	r1, r2
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800955a:	b480      	push	{r7}
 800955c:	b087      	sub	sp, #28
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	3301      	adds	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009578:	8a3b      	ldrh	r3, [r7, #16]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	b21a      	sxth	r2, r3
 800957e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009582:	4313      	orrs	r3, r2
 8009584:	b21b      	sxth	r3, r3
 8009586:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009588:	89fb      	ldrh	r3, [r7, #14]
}
 800958a:	4618      	mov	r0, r3
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
	...

08009598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d005      	beq.n	80095be <USBD_StdDevReq+0x26>
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d853      	bhi.n	800965e <USBD_StdDevReq+0xc6>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00b      	beq.n	80095d2 <USBD_StdDevReq+0x3a>
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d14f      	bne.n	800965e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
 80095cc:	4603      	mov	r3, r0
 80095ce:	73fb      	strb	r3, [r7, #15]
      break;
 80095d0:	e04a      	b.n	8009668 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d83b      	bhi.n	8009652 <USBD_StdDevReq+0xba>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <USBD_StdDevReq+0x48>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009635 	.word	0x08009635
 80095e4:	08009649 	.word	0x08009649
 80095e8:	08009653 	.word	0x08009653
 80095ec:	0800963f 	.word	0x0800963f
 80095f0:	08009653 	.word	0x08009653
 80095f4:	08009613 	.word	0x08009613
 80095f8:	08009609 	.word	0x08009609
 80095fc:	08009653 	.word	0x08009653
 8009600:	0800962b 	.word	0x0800962b
 8009604:	0800961d 	.word	0x0800961d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9de 	bl	80099cc <USBD_GetDescriptor>
          break;
 8009610:	e024      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fb43 	bl	8009ca0 <USBD_SetAddress>
          break;
 800961a:	e01f      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb82 	bl	8009d28 <USBD_SetConfig>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]
          break;
 8009628:	e018      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fc21 	bl	8009e74 <USBD_GetConfig>
          break;
 8009632:	e013      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fc52 	bl	8009ee0 <USBD_GetStatus>
          break;
 800963c:	e00e      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc81 	bl	8009f48 <USBD_SetFeature>
          break;
 8009646:	e009      	b.n	800965c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fc90 	bl	8009f70 <USBD_ClrFeature>
          break;
 8009650:	e004      	b.n	800965c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fce7 	bl	800a028 <USBD_CtlError>
          break;
 800965a:	bf00      	nop
      }
      break;
 800965c:	e004      	b.n	8009668 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fce1 	bl	800a028 <USBD_CtlError>
      break;
 8009666:	bf00      	nop
  }

  return ret;
 8009668:	7bfb      	ldrb	r3, [r7, #15]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop

08009674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d005      	beq.n	800969a <USBD_StdItfReq+0x26>
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d82f      	bhi.n	80096f2 <USBD_StdItfReq+0x7e>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <USBD_StdItfReq+0x26>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d12b      	bne.n	80096f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d81d      	bhi.n	80096e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	889b      	ldrh	r3, [r3, #4]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d813      	bhi.n	80096da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	88db      	ldrh	r3, [r3, #6]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d110      	bne.n	80096ee <USBD_StdItfReq+0x7a>
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10d      	bne.n	80096ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fd56 	bl	800a184 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096d8:	e009      	b.n	80096ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fca3 	bl	800a028 <USBD_CtlError>
          break;
 80096e2:	e004      	b.n	80096ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc9e 	bl	800a028 <USBD_CtlError>
          break;
 80096ec:	e000      	b.n	80096f0 <USBD_StdItfReq+0x7c>
          break;
 80096ee:	bf00      	nop
      }
      break;
 80096f0:	e004      	b.n	80096fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc97 	bl	800a028 <USBD_CtlError>
      break;
 80096fa:	bf00      	nop
  }

  return ret;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	889b      	ldrh	r3, [r3, #4]
 8009718:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009722:	2b40      	cmp	r3, #64	; 0x40
 8009724:	d007      	beq.n	8009736 <USBD_StdEPReq+0x30>
 8009726:	2b40      	cmp	r3, #64	; 0x40
 8009728:	f200 8145 	bhi.w	80099b6 <USBD_StdEPReq+0x2b0>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <USBD_StdEPReq+0x44>
 8009730:	2b20      	cmp	r3, #32
 8009732:	f040 8140 	bne.w	80099b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]
      break;
 8009748:	e13a      	b.n	80099c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b03      	cmp	r3, #3
 8009750:	d007      	beq.n	8009762 <USBD_StdEPReq+0x5c>
 8009752:	2b03      	cmp	r3, #3
 8009754:	f300 8129 	bgt.w	80099aa <USBD_StdEPReq+0x2a4>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d07f      	beq.n	800985c <USBD_StdEPReq+0x156>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d03c      	beq.n	80097da <USBD_StdEPReq+0xd4>
 8009760:	e123      	b.n	80099aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d002      	beq.n	8009774 <USBD_StdEPReq+0x6e>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d016      	beq.n	80097a0 <USBD_StdEPReq+0x9a>
 8009772:	e02c      	b.n	80097ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <USBD_StdEPReq+0x90>
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d00a      	beq.n	8009796 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f859 	bl	800a83c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f855 	bl	800a83c <USBD_LL_StallEP>
 8009792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009794:	e020      	b.n	80097d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc45 	bl	800a028 <USBD_CtlError>
              break;
 800979e:	e01b      	b.n	80097d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10e      	bne.n	80097c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <USBD_StdEPReq+0xc0>
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b80      	cmp	r3, #128	; 0x80
 80097b2:	d008      	beq.n	80097c6 <USBD_StdEPReq+0xc0>
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88db      	ldrh	r3, [r3, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 f83b 	bl	800a83c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fcdc 	bl	800a184 <USBD_CtlSendStatus>

              break;
 80097cc:	e004      	b.n	80097d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fc29 	bl	800a028 <USBD_CtlError>
              break;
 80097d6:	bf00      	nop
          }
          break;
 80097d8:	e0ec      	b.n	80099b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USBD_StdEPReq+0xe6>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d016      	beq.n	8009818 <USBD_StdEPReq+0x112>
 80097ea:	e030      	b.n	800984e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_StdEPReq+0x108>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d00a      	beq.n	800980e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f81d 	bl	800a83c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f819 	bl	800a83c <USBD_LL_StallEP>
 800980a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800980c:	e025      	b.n	800985a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc09 	bl	800a028 <USBD_CtlError>
              break;
 8009816:	e020      	b.n	800985a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	885b      	ldrh	r3, [r3, #2]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d11b      	bne.n	8009858 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009826:	2b00      	cmp	r3, #0
 8009828:	d004      	beq.n	8009834 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 f823 	bl	800a87a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fca5 	bl	800a184 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800984c:	e004      	b.n	8009858 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fbe9 	bl	800a028 <USBD_CtlError>
              break;
 8009856:	e000      	b.n	800985a <USBD_StdEPReq+0x154>
              break;
 8009858:	bf00      	nop
          }
          break;
 800985a:	e0ab      	b.n	80099b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d002      	beq.n	800986e <USBD_StdEPReq+0x168>
 8009868:	2b03      	cmp	r3, #3
 800986a:	d032      	beq.n	80098d2 <USBD_StdEPReq+0x1cc>
 800986c:	e097      	b.n	800999e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <USBD_StdEPReq+0x17e>
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b80      	cmp	r3, #128	; 0x80
 8009878:	d004      	beq.n	8009884 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fbd3 	bl	800a028 <USBD_CtlError>
                break;
 8009882:	e091      	b.n	80099a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009888:	2b00      	cmp	r3, #0
 800988a:	da0b      	bge.n	80098a4 <USBD_StdEPReq+0x19e>
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	3310      	adds	r3, #16
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	4413      	add	r3, r2
 80098a0:	3304      	adds	r3, #4
 80098a2:	e00b      	b.n	80098bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	3304      	adds	r3, #4
 80098bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2202      	movs	r2, #2
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fc1d 	bl	800a10a <USBD_CtlSendData>
              break;
 80098d0:	e06a      	b.n	80099a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	da11      	bge.n	80098fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	f003 020f 	and.w	r2, r3, #15
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	3324      	adds	r3, #36	; 0x24
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d117      	bne.n	8009924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fb96 	bl	800a028 <USBD_CtlError>
                  break;
 80098fc:	e054      	b.n	80099a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	f003 020f 	and.w	r2, r3, #15
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	440b      	add	r3, r1
 8009910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fb83 	bl	800a028 <USBD_CtlError>
                  break;
 8009922:	e041      	b.n	80099a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da0b      	bge.n	8009944 <USBD_StdEPReq+0x23e>
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	3310      	adds	r3, #16
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
 8009942:	e00b      	b.n	800995c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	3304      	adds	r3, #4
 800995c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <USBD_StdEPReq+0x264>
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	2b80      	cmp	r3, #128	; 0x80
 8009968:	d103      	bne.n	8009972 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e00e      	b.n	8009990 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 ff9e 	bl	800a8b8 <USBD_LL_IsStallEP>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e002      	b.n	8009990 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2202      	movs	r2, #2
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fbb7 	bl	800a10a <USBD_CtlSendData>
              break;
 800999c:	e004      	b.n	80099a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fb41 	bl	800a028 <USBD_CtlError>
              break;
 80099a6:	bf00      	nop
          }
          break;
 80099a8:	e004      	b.n	80099b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fb3b 	bl	800a028 <USBD_CtlError>
          break;
 80099b2:	bf00      	nop
      }
      break;
 80099b4:	e004      	b.n	80099c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb35 	bl	800a028 <USBD_CtlError>
      break;
 80099be:	bf00      	nop
  }

  return ret;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	885b      	ldrh	r3, [r3, #2]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	2b06      	cmp	r3, #6
 80099ee:	f200 8128 	bhi.w	8009c42 <USBD_GetDescriptor+0x276>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBD_GetDescriptor+0x2c>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a15 	.word	0x08009a15
 80099fc:	08009a2d 	.word	0x08009a2d
 8009a00:	08009a6d 	.word	0x08009a6d
 8009a04:	08009c43 	.word	0x08009c43
 8009a08:	08009c43 	.word	0x08009c43
 8009a0c:	08009be3 	.word	0x08009be3
 8009a10:	08009c0f 	.word	0x08009c0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
      break;
 8009a2a:	e112      	b.n	8009c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7c1b      	ldrb	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10d      	bne.n	8009a50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	f107 0208 	add.w	r2, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a4e:	e100      	b.n	8009c52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	f107 0208 	add.w	r2, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	2202      	movs	r2, #2
 8009a68:	701a      	strb	r2, [r3, #0]
      break;
 8009a6a:	e0f2      	b.n	8009c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	885b      	ldrh	r3, [r3, #2]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b05      	cmp	r3, #5
 8009a74:	f200 80ac 	bhi.w	8009bd0 <USBD_GetDescriptor+0x204>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_GetDescriptor+0xb4>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009acd 	.word	0x08009acd
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009b35 	.word	0x08009b35
 8009a90:	08009b69 	.word	0x08009b69
 8009a94:	08009b9d 	.word	0x08009b9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e091      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fab2 	bl	800a028 <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e089      	b.n	8009be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e077      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa98 	bl	800a028 <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e06f      	b.n	8009be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b22:	e05d      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa7e 	bl	800a028 <USBD_CtlError>
            err++;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	72fb      	strb	r3, [r7, #11]
          break;
 8009b32:	e055      	b.n	8009be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b56:	e043      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa64 	bl	800a028 <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e03b      	b.n	8009be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8a:	e029      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa4a 	bl	800a028 <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e021      	b.n	8009be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bbe:	e00f      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa30 	bl	800a028 <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e007      	b.n	8009be0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa28 	bl	800a028 <USBD_CtlError>
          err++;
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009bde:	bf00      	nop
      }
      break;
 8009be0:	e037      	b.n	8009c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7c1b      	ldrb	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d109      	bne.n	8009bfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf2:	f107 0208 	add.w	r2, r7, #8
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4798      	blx	r3
 8009bfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bfc:	e029      	b.n	8009c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa11 	bl	800a028 <USBD_CtlError>
        err++;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c0c:	e021      	b.n	8009c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7c1b      	ldrb	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10d      	bne.n	8009c32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	f107 0208 	add.w	r2, r7, #8
 8009c22:	4610      	mov	r0, r2
 8009c24:	4798      	blx	r3
 8009c26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	2207      	movs	r2, #7
 8009c2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c30:	e00f      	b.n	8009c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f9f7 	bl	800a028 <USBD_CtlError>
        err++;
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c40:	e007      	b.n	8009c52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f9ef 	bl	800a028 <USBD_CtlError>
      err++;
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c50:	bf00      	nop
  }

  if (err != 0U)
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11e      	bne.n	8009c96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	88db      	ldrh	r3, [r3, #6]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d016      	beq.n	8009c8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c60:	893b      	ldrh	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00e      	beq.n	8009c84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	88da      	ldrh	r2, [r3, #6]
 8009c6a:	893b      	ldrh	r3, [r7, #8]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	bf28      	it	cs
 8009c70:	4613      	movcs	r3, r2
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c76:	893b      	ldrh	r3, [r7, #8]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa44 	bl	800a10a <USBD_CtlSendData>
 8009c82:	e009      	b.n	8009c98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f9ce 	bl	800a028 <USBD_CtlError>
 8009c8c:	e004      	b.n	8009c98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa78 	bl	800a184 <USBD_CtlSendStatus>
 8009c94:	e000      	b.n	8009c98 <USBD_GetDescriptor+0x2cc>
    return;
 8009c96:	bf00      	nop
  }
}
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop

08009ca0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	889b      	ldrh	r3, [r3, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d131      	bne.n	8009d16 <USBD_SetAddress+0x76>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d12d      	bne.n	8009d16 <USBD_SetAddress+0x76>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	885b      	ldrh	r3, [r3, #2]
 8009cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8009cc0:	d829      	bhi.n	8009d16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	885b      	ldrh	r3, [r3, #2]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d104      	bne.n	8009ce4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9a3 	bl	800a028 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce2:	e01d      	b.n	8009d20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7bfa      	ldrb	r2, [r7, #15]
 8009ce8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fe0d 	bl	800a910 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa44 	bl	800a184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0a:	e009      	b.n	8009d20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d14:	e004      	b.n	8009d20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f985 	bl	800a028 <USBD_CtlError>
  }
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	4b4c      	ldr	r3, [pc, #304]	; (8009e70 <USBD_SetConfig+0x148>)
 8009d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d40:	4b4b      	ldr	r3, [pc, #300]	; (8009e70 <USBD_SetConfig+0x148>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d905      	bls.n	8009d54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f96c 	bl	800a028 <USBD_CtlError>
    return USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e088      	b.n	8009e66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d002      	beq.n	8009d66 <USBD_SetConfig+0x3e>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d025      	beq.n	8009db0 <USBD_SetConfig+0x88>
 8009d64:	e071      	b.n	8009e4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d66:	4b42      	ldr	r3, [pc, #264]	; (8009e70 <USBD_SetConfig+0x148>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01c      	beq.n	8009da8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009d6e:	4b40      	ldr	r3, [pc, #256]	; (8009e70 <USBD_SetConfig+0x148>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d78:	4b3d      	ldr	r3, [pc, #244]	; (8009e70 <USBD_SetConfig+0x148>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff f948 	bl	8009014 <USBD_SetClassConfig>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d004      	beq.n	8009d98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f949 	bl	800a028 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d96:	e065      	b.n	8009e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9f3 	bl	800a184 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2203      	movs	r2, #3
 8009da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009da6:	e05d      	b.n	8009e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9eb 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009dae:	e059      	b.n	8009e64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009db0:	4b2f      	ldr	r3, [pc, #188]	; (8009e70 <USBD_SetConfig+0x148>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d112      	bne.n	8009dde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009dc0:	4b2b      	ldr	r3, [pc, #172]	; (8009e70 <USBD_SetConfig+0x148>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dca:	4b29      	ldr	r3, [pc, #164]	; (8009e70 <USBD_SetConfig+0x148>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff f93b 	bl	800904c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f9d4 	bl	800a184 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ddc:	e042      	b.n	8009e64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009dde:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <USBD_SetConfig+0x148>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d02a      	beq.n	8009e42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff f929 	bl	800904c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <USBD_SetConfig+0x148>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e04:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <USBD_SetConfig+0x148>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff f902 	bl	8009014 <USBD_SetClassConfig>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00f      	beq.n	8009e3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f903 	bl	800a028 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff f90e 	bl	800904c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e38:	e014      	b.n	8009e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f9a2 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009e40:	e010      	b.n	8009e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f99e 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009e48:	e00c      	b.n	8009e64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8eb 	bl	800a028 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <USBD_SetConfig+0x148>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff f8f7 	bl	800904c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	73fb      	strb	r3, [r7, #15]
      break;
 8009e62:	bf00      	nop
  }

  return ret;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20012fd8 	.word	0x20012fd8

08009e74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	88db      	ldrh	r3, [r3, #6]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d004      	beq.n	8009e90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8cd 	bl	800a028 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e8e:	e023      	b.n	8009ed8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	dc02      	bgt.n	8009ea2 <USBD_GetConfig+0x2e>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc03      	bgt.n	8009ea8 <USBD_GetConfig+0x34>
 8009ea0:	e015      	b.n	8009ece <USBD_GetConfig+0x5a>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d00b      	beq.n	8009ebe <USBD_GetConfig+0x4a>
 8009ea6:	e012      	b.n	8009ece <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f927 	bl	800a10a <USBD_CtlSendData>
        break;
 8009ebc:	e00c      	b.n	8009ed8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f91f 	bl	800a10a <USBD_CtlSendData>
        break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f8a9 	bl	800a028 <USBD_CtlError>
        break;
 8009ed6:	bf00      	nop
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d81e      	bhi.n	8009f36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	88db      	ldrh	r3, [r3, #6]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d004      	beq.n	8009f0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f890 	bl	800a028 <USBD_CtlError>
        break;
 8009f08:	e01a      	b.n	8009f40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f043 0202 	orr.w	r2, r3, #2
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	330c      	adds	r3, #12
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f8eb 	bl	800a10a <USBD_CtlSendData>
      break;
 8009f34:	e004      	b.n	8009f40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f875 	bl	800a028 <USBD_CtlError>
      break;
 8009f3e:	bf00      	nop
  }
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d106      	bne.n	8009f68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f90e 	bl	800a184 <USBD_CtlSendStatus>
  }
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	3b01      	subs	r3, #1
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d80b      	bhi.n	8009fa0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d10c      	bne.n	8009faa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f8f3 	bl	800a184 <USBD_CtlSendStatus>
      }
      break;
 8009f9e:	e004      	b.n	8009faa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f840 	bl	800a028 <USBD_CtlError>
      break;
 8009fa8:	e000      	b.n	8009fac <USBD_ClrFeature+0x3c>
      break;
 8009faa:	bf00      	nop
  }
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	781a      	ldrb	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fabb 	bl	800955a <SWAPBYTE>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff faae 	bl	800955a <SWAPBYTE>
 8009ffe:	4603      	mov	r3, r0
 800a000:	461a      	mov	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3301      	adds	r3, #1
 800a00a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff faa1 	bl	800955a <SWAPBYTE>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	80da      	strh	r2, [r3, #6]
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a032:	2180      	movs	r1, #128	; 0x80
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fc01 	bl	800a83c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a03a:	2100      	movs	r1, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fbfd 	bl	800a83c <USBD_LL_StallEP>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b086      	sub	sp, #24
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d036      	beq.n	800a0ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a064:	6938      	ldr	r0, [r7, #16]
 800a066:	f000 f836 	bl	800a0d6 <USBD_GetLen>
 800a06a:	4603      	mov	r3, r0
 800a06c:	3301      	adds	r3, #1
 800a06e:	b29b      	uxth	r3, r3
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4413      	add	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	701a      	strb	r2, [r3, #0]
  idx++;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	3301      	adds	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	2203      	movs	r2, #3
 800a092:	701a      	strb	r2, [r3, #0]
  idx++;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	3301      	adds	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a09a:	e013      	b.n	800a0c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	7812      	ldrb	r2, [r2, #0]
 800a0a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	613b      	str	r3, [r7, #16]
    idx++;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e7      	bne.n	800a09c <USBD_GetString+0x52>
 800a0cc:	e000      	b.n	800a0d0 <USBD_GetString+0x86>
    return;
 800a0ce:	bf00      	nop
  }
}
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0e6:	e005      	b.n	800a0f4 <USBD_GetLen+0x1e>
  {
    len++;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1f5      	bne.n	800a0e8 <USBD_GetLen+0x12>
  }

  return len;
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2202      	movs	r2, #2
 800a11a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	2100      	movs	r1, #0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fc0c 	bl	800a94e <USBD_LL_Transmit>

  return USBD_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 fbfb 	bl	800a94e <USBD_LL_Transmit>

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fc0b 	bl	800a990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2204      	movs	r2, #4
 800a190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a194:	2300      	movs	r3, #0
 800a196:	2200      	movs	r2, #0
 800a198:	2100      	movs	r1, #0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fbd7 	bl	800a94e <USBD_LL_Transmit>

  return USBD_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2205      	movs	r2, #5
 800a1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fbe5 	bl	800a990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	490e      	ldr	r1, [pc, #56]	; (800a210 <MX_USB_DEVICE_Init+0x40>)
 800a1d8:	480e      	ldr	r0, [pc, #56]	; (800a214 <MX_USB_DEVICE_Init+0x44>)
 800a1da:	f7fe fead 	bl	8008f38 <USBD_Init>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1e4:	f7f6 fd5a 	bl	8000c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a1e8:	490b      	ldr	r1, [pc, #44]	; (800a218 <MX_USB_DEVICE_Init+0x48>)
 800a1ea:	480a      	ldr	r0, [pc, #40]	; (800a214 <MX_USB_DEVICE_Init+0x44>)
 800a1ec:	f7fe fed4 	bl	8008f98 <USBD_RegisterClass>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1f6:	f7f6 fd51 	bl	8000c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1fa:	4806      	ldr	r0, [pc, #24]	; (800a214 <MX_USB_DEVICE_Init+0x44>)
 800a1fc:	f7fe fef3 	bl	8008fe6 <USBD_Start>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a206:	f7f6 fd49 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000154 	.word	0x20000154
 800a214:	20013168 	.word	0x20013168
 800a218:	20000058 	.word	0x20000058

0800a21c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2212      	movs	r2, #18
 800a22c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a22e:	4b03      	ldr	r3, [pc, #12]	; (800a23c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20000170 	.word	0x20000170

0800a240 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a252:	4b03      	ldr	r3, [pc, #12]	; (800a260 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	20000184 	.word	0x20000184

0800a264 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4907      	ldr	r1, [pc, #28]	; (800a298 <USBD_FS_ProductStrDescriptor+0x34>)
 800a27a:	4808      	ldr	r0, [pc, #32]	; (800a29c <USBD_FS_ProductStrDescriptor+0x38>)
 800a27c:	f7ff fee5 	bl	800a04a <USBD_GetString>
 800a280:	e004      	b.n	800a28c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4904      	ldr	r1, [pc, #16]	; (800a298 <USBD_FS_ProductStrDescriptor+0x34>)
 800a286:	4805      	ldr	r0, [pc, #20]	; (800a29c <USBD_FS_ProductStrDescriptor+0x38>)
 800a288:	f7ff fedf 	bl	800a04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a28c:	4b02      	ldr	r3, [pc, #8]	; (800a298 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20013438 	.word	0x20013438
 800a29c:	0800ab1c 	.word	0x0800ab1c

0800a2a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	4904      	ldr	r1, [pc, #16]	; (800a2c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2b0:	4804      	ldr	r0, [pc, #16]	; (800a2c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2b2:	f7ff feca 	bl	800a04a <USBD_GetString>
  return USBD_StrDesc;
 800a2b6:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20013438 	.word	0x20013438
 800a2c4:	0800ab2c 	.word	0x0800ab2c

0800a2c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	221a      	movs	r2, #26
 800a2d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2da:	f000 f843 	bl	800a364 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2de:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20000188 	.word	0x20000188

0800a2ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d105      	bne.n	800a30a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4907      	ldr	r1, [pc, #28]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a302:	4808      	ldr	r0, [pc, #32]	; (800a324 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a304:	f7ff fea1 	bl	800a04a <USBD_GetString>
 800a308:	e004      	b.n	800a314 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	4904      	ldr	r1, [pc, #16]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a30e:	4805      	ldr	r0, [pc, #20]	; (800a324 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a310:	f7ff fe9b 	bl	800a04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a314:	4b02      	ldr	r3, [pc, #8]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20013438 	.word	0x20013438
 800a324:	0800ab40 	.word	0x0800ab40

0800a328 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4907      	ldr	r1, [pc, #28]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a33e:	4808      	ldr	r0, [pc, #32]	; (800a360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a340:	f7ff fe83 	bl	800a04a <USBD_GetString>
 800a344:	e004      	b.n	800a350 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4904      	ldr	r1, [pc, #16]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a34a:	4805      	ldr	r0, [pc, #20]	; (800a360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a34c:	f7ff fe7d 	bl	800a04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a350:	4b02      	ldr	r3, [pc, #8]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20013438 	.word	0x20013438
 800a360:	0800ab4c 	.word	0x0800ab4c

0800a364 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a36a:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <Get_SerialNum+0x44>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a370:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <Get_SerialNum+0x48>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a376:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <Get_SerialNum+0x4c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a38a:	2208      	movs	r2, #8
 800a38c:	4909      	ldr	r1, [pc, #36]	; (800a3b4 <Get_SerialNum+0x50>)
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 f814 	bl	800a3bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a394:	2204      	movs	r2, #4
 800a396:	4908      	ldr	r1, [pc, #32]	; (800a3b8 <Get_SerialNum+0x54>)
 800a398:	68b8      	ldr	r0, [r7, #8]
 800a39a:	f000 f80f 	bl	800a3bc <IntToUnicode>
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	1fff7a10 	.word	0x1fff7a10
 800a3ac:	1fff7a14 	.word	0x1fff7a14
 800a3b0:	1fff7a18 	.word	0x1fff7a18
 800a3b4:	2000018a 	.word	0x2000018a
 800a3b8:	2000019a 	.word	0x2000019a

0800a3bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]
 800a3d2:	e027      	b.n	800a424 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0f1b      	lsrs	r3, r3, #28
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d80b      	bhi.n	800a3f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	0f1b      	lsrs	r3, r3, #28
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	440b      	add	r3, r1
 800a3ec:	3230      	adds	r2, #48	; 0x30
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e00a      	b.n	800a40a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	0f1b      	lsrs	r3, r3, #28
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	4619      	mov	r1, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	440b      	add	r3, r1
 800a404:	3237      	adds	r2, #55	; 0x37
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	3301      	adds	r3, #1
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	2200      	movs	r2, #0
 800a41c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	3301      	adds	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
 800a424:	7dfa      	ldrb	r2, [r7, #23]
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d3d3      	bcc.n	800a3d4 <IntToUnicode+0x18>
  }
}
 800a42c:	bf00      	nop
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
	...

0800a43c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	; 0x28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a444:	f107 0314 	add.w	r3, r7, #20
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	605a      	str	r2, [r3, #4]
 800a44e:	609a      	str	r2, [r3, #8]
 800a450:	60da      	str	r2, [r3, #12]
 800a452:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a45c:	d147      	bne.n	800a4ee <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a45e:	2300      	movs	r3, #0
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	4b25      	ldr	r3, [pc, #148]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	4a24      	ldr	r2, [pc, #144]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a468:	f043 0301 	orr.w	r3, r3, #1
 800a46c:	6313      	str	r3, [r2, #48]	; 0x30
 800a46e:	4b22      	ldr	r3, [pc, #136]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a47a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a47e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a480:	2300      	movs	r3, #0
 800a482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a484:	2300      	movs	r3, #0
 800a486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	4619      	mov	r1, r3
 800a48e:	481b      	ldr	r0, [pc, #108]	; (800a4fc <HAL_PCD_MspInit+0xc0>)
 800a490:	f7f7 facc 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a494:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49a:	2302      	movs	r3, #2
 800a49c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4a6:	230a      	movs	r3, #10
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4aa:	f107 0314 	add.w	r3, r7, #20
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4812      	ldr	r0, [pc, #72]	; (800a4fc <HAL_PCD_MspInit+0xc0>)
 800a4b2:	f7f7 fabb 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a4b6:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ba:	4a0f      	ldr	r2, [pc, #60]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c0:	6353      	str	r3, [r2, #52]	; 0x34
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ca:	4a0b      	ldr	r2, [pc, #44]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a4cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4d0:	6453      	str	r3, [r2, #68]	; 0x44
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <HAL_PCD_MspInit+0xbc>)
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	2043      	movs	r0, #67	; 0x43
 800a4e4:	f7f7 fa78 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4e8:	2043      	movs	r0, #67	; 0x43
 800a4ea:	f7f7 fa91 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3728      	adds	r7, #40	; 0x28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	40023800 	.word	0x40023800
 800a4fc:	40020000 	.word	0x40020000

0800a500 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a514:	4619      	mov	r1, r3
 800a516:	4610      	mov	r0, r2
 800a518:	f7fe fdb0 	bl	800907c <USBD_LL_SetupStage>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a536:	78fa      	ldrb	r2, [r7, #3]
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	00db      	lsls	r3, r3, #3
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	4619      	mov	r1, r3
 800a54e:	f7fe fdea 	bl	8009126 <USBD_LL_DataOutStage>
}
 800a552:	bf00      	nop
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a56c:	78fa      	ldrb	r2, [r7, #3]
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	4613      	mov	r3, r2
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	440b      	add	r3, r1
 800a57a:	3348      	adds	r3, #72	; 0x48
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	4619      	mov	r1, r3
 800a582:	f7fe fe33 	bl	80091ec <USBD_LL_DataInStage>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe ff47 	bl	8009430 <USBD_LL_SOF>
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d102      	bne.n	800a5c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
 800a5c2:	e008      	b.n	800a5d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d102      	bne.n	800a5d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	73fb      	strb	r3, [r7, #15]
 800a5d0:	e001      	b.n	800a5d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5d2:	f7f6 fb63 	bl	8000c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5dc:	7bfa      	ldrb	r2, [r7, #15]
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fe fee7 	bl	80093b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fe93 	bl	8009318 <USBD_LL_Reset>
}
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fee2 	bl	80093d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a630:	4b04      	ldr	r3, [pc, #16]	; (800a644 <HAL_PCD_SuspendCallback+0x48>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	4a03      	ldr	r2, [pc, #12]	; (800a644 <HAL_PCD_SuspendCallback+0x48>)
 800a636:	f043 0306 	orr.w	r3, r3, #6
 800a63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed00 	.word	0xe000ed00

0800a648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fed2 	bl	8009400 <USBD_LL_Resume>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe ff20 	bl	80094c0 <USBD_LL_IsoOUTIncomplete>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fee8 	bl	8009474 <USBD_LL_IsoINIncomplete>
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe ff26 	bl	800950c <USBD_LL_DevConnected>
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe ff23 	bl	8009522 <USBD_LL_DevDisconnected>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d13c      	bne.n	800a76e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6f4:	4a20      	ldr	r2, [pc, #128]	; (800a778 <USBD_LL_Init+0x94>)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <USBD_LL_Init+0x94>)
 800a700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a704:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <USBD_LL_Init+0x94>)
 800a706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a70a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <USBD_LL_Init+0x94>)
 800a70e:	2204      	movs	r2, #4
 800a710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a712:	4b19      	ldr	r3, [pc, #100]	; (800a778 <USBD_LL_Init+0x94>)
 800a714:	2202      	movs	r2, #2
 800a716:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <USBD_LL_Init+0x94>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a71e:	4b16      	ldr	r3, [pc, #88]	; (800a778 <USBD_LL_Init+0x94>)
 800a720:	2202      	movs	r2, #2
 800a722:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a724:	4b14      	ldr	r3, [pc, #80]	; (800a778 <USBD_LL_Init+0x94>)
 800a726:	2200      	movs	r2, #0
 800a728:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a72a:	4b13      	ldr	r3, [pc, #76]	; (800a778 <USBD_LL_Init+0x94>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <USBD_LL_Init+0x94>)
 800a732:	2200      	movs	r2, #0
 800a734:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a736:	4b10      	ldr	r3, [pc, #64]	; (800a778 <USBD_LL_Init+0x94>)
 800a738:	2201      	movs	r2, #1
 800a73a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a73c:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <USBD_LL_Init+0x94>)
 800a73e:	2200      	movs	r2, #0
 800a740:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a742:	480d      	ldr	r0, [pc, #52]	; (800a778 <USBD_LL_Init+0x94>)
 800a744:	f7f7 fb58 	bl	8001df8 <HAL_PCD_Init>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a74e:	f7f6 faa5 	bl	8000c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a752:	2180      	movs	r1, #128	; 0x80
 800a754:	4808      	ldr	r0, [pc, #32]	; (800a778 <USBD_LL_Init+0x94>)
 800a756:	f7f8 fc9e 	bl	8003096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	2100      	movs	r1, #0
 800a75e:	4806      	ldr	r0, [pc, #24]	; (800a778 <USBD_LL_Init+0x94>)
 800a760:	f7f8 fc52 	bl	8003008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a764:	2280      	movs	r2, #128	; 0x80
 800a766:	2101      	movs	r1, #1
 800a768:	4803      	ldr	r0, [pc, #12]	; (800a778 <USBD_LL_Init+0x94>)
 800a76a:	f7f8 fc4d 	bl	8003008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20013638 	.word	0x20013638

0800a77c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a792:	4618      	mov	r0, r3
 800a794:	f7f7 fc4d 	bl	8002032 <HAL_PCD_Start>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 f930 	bl	800aa04 <USBD_Get_USB_Status>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	4608      	mov	r0, r1
 800a7bc:	4611      	mov	r1, r2
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	70fb      	strb	r3, [r7, #3]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70bb      	strb	r3, [r7, #2]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7da:	78bb      	ldrb	r3, [r7, #2]
 800a7dc:	883a      	ldrh	r2, [r7, #0]
 800a7de:	78f9      	ldrb	r1, [r7, #3]
 800a7e0:	f7f8 f831 	bl	8002846 <HAL_PCD_EP_Open>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f90a 	bl	800aa04 <USBD_Get_USB_Status>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a818:	78fa      	ldrb	r2, [r7, #3]
 800a81a:	4611      	mov	r1, r2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f8 f87a 	bl	8002916 <HAL_PCD_EP_Close>
 800a822:	4603      	mov	r3, r0
 800a824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 f8eb 	bl	800aa04 <USBD_Get_USB_Status>
 800a82e:	4603      	mov	r3, r0
 800a830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a832:	7bbb      	ldrb	r3, [r7, #14]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f8 f93a 	bl	8002ad4 <HAL_PCD_EP_SetStall>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f8cc 	bl	800aa04 <USBD_Get_USB_Status>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a870:	7bbb      	ldrb	r3, [r7, #14]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a894:	78fa      	ldrb	r2, [r7, #3]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7f8 f97f 	bl	8002b9c <HAL_PCD_EP_ClrStall>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f8ad 	bl	800aa04 <USBD_Get_USB_Status>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	da0b      	bge.n	800a8ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	440b      	add	r3, r1
 800a8e6:	333e      	adds	r3, #62	; 0x3e
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	e00b      	b.n	800a904 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	440b      	add	r3, r1
 800a8fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a902:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f7 ff64 	bl	80027fc <HAL_PCD_SetAddress>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f862 	bl	800aa04 <USBD_Get_USB_Status>
 800a940:	4603      	mov	r3, r0
 800a942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a944:	7bbb      	ldrb	r3, [r7, #14]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
 800a95a:	460b      	mov	r3, r1
 800a95c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a96c:	7af9      	ldrb	r1, [r7, #11]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	f7f8 f865 	bl	8002a40 <HAL_PCD_EP_Transmit>
 800a976:	4603      	mov	r3, r0
 800a978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f841 	bl	800aa04 <USBD_Get_USB_Status>
 800a982:	4603      	mov	r3, r0
 800a984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a986:	7dbb      	ldrb	r3, [r7, #22]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	460b      	mov	r3, r1
 800a99e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9ae:	7af9      	ldrb	r1, [r7, #11]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	f7f7 fff9 	bl	80029aa <HAL_PCD_EP_Receive>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 f820 	bl	800aa04 <USBD_Get_USB_Status>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <USBD_static_malloc+0x18>)
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20012fdc 	.word	0x20012fdc

0800a9f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d817      	bhi.n	800aa48 <USBD_Get_USB_Status+0x44>
 800aa18:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBD_Get_USB_Status+0x1c>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa37 	.word	0x0800aa37
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa43 	.word	0x0800aa43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
    break;
 800aa34:	e00b      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3a:	e008      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa40:	e005      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa42:	2303      	movs	r3, #3
 800aa44:	73fb      	strb	r3, [r7, #15]
    break;
 800aa46:	e002      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4c:	bf00      	nop
  }
  return usb_status;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <__libc_init_array>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4d0d      	ldr	r5, [pc, #52]	; (800aa94 <__libc_init_array+0x38>)
 800aa60:	4c0d      	ldr	r4, [pc, #52]	; (800aa98 <__libc_init_array+0x3c>)
 800aa62:	1b64      	subs	r4, r4, r5
 800aa64:	10a4      	asrs	r4, r4, #2
 800aa66:	2600      	movs	r6, #0
 800aa68:	42a6      	cmp	r6, r4
 800aa6a:	d109      	bne.n	800aa80 <__libc_init_array+0x24>
 800aa6c:	4d0b      	ldr	r5, [pc, #44]	; (800aa9c <__libc_init_array+0x40>)
 800aa6e:	4c0c      	ldr	r4, [pc, #48]	; (800aaa0 <__libc_init_array+0x44>)
 800aa70:	f000 f82e 	bl	800aad0 <_init>
 800aa74:	1b64      	subs	r4, r4, r5
 800aa76:	10a4      	asrs	r4, r4, #2
 800aa78:	2600      	movs	r6, #0
 800aa7a:	42a6      	cmp	r6, r4
 800aa7c:	d105      	bne.n	800aa8a <__libc_init_array+0x2e>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa84:	4798      	blx	r3
 800aa86:	3601      	adds	r6, #1
 800aa88:	e7ee      	b.n	800aa68 <__libc_init_array+0xc>
 800aa8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa8e:	4798      	blx	r3
 800aa90:	3601      	adds	r6, #1
 800aa92:	e7f2      	b.n	800aa7a <__libc_init_array+0x1e>
 800aa94:	0800abac 	.word	0x0800abac
 800aa98:	0800abac 	.word	0x0800abac
 800aa9c:	0800abac 	.word	0x0800abac
 800aaa0:	0800abb0 	.word	0x0800abb0

0800aaa4 <memcpy>:
 800aaa4:	440a      	add	r2, r1
 800aaa6:	4291      	cmp	r1, r2
 800aaa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaac:	d100      	bne.n	800aab0 <memcpy+0xc>
 800aaae:	4770      	bx	lr
 800aab0:	b510      	push	{r4, lr}
 800aab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaba:	4291      	cmp	r1, r2
 800aabc:	d1f9      	bne.n	800aab2 <memcpy+0xe>
 800aabe:	bd10      	pop	{r4, pc}

0800aac0 <memset>:
 800aac0:	4402      	add	r2, r0
 800aac2:	4603      	mov	r3, r0
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d100      	bne.n	800aaca <memset+0xa>
 800aac8:	4770      	bx	lr
 800aaca:	f803 1b01 	strb.w	r1, [r3], #1
 800aace:	e7f9      	b.n	800aac4 <memset+0x4>

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
